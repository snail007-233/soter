<?php
/*
 * Copyright 2015 Soter(狂奔的蜗牛 672308444@163.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Soter
 *
 * An open source application development framework for PHP 5.3.0 or newer
 *
 * @package       Soter
 * @author        狂奔的蜗牛
 * @email         672308444@163.com
 * @copyright     Copyright (c) 2015 - 2015, 狂奔的蜗牛, Inc.
 * @link          http://git.oschina.net/snail/soter
 * @since         1.0.11
 * @createdtime   2015-05-14 09:59:07
 */
  class soter{private static $soterconfig;public static function classautoloader($classname){$config=self::$soterconfig;$classname=str_replace('_','/',$classname);foreach(self::$soterconfig->getpackages()as $path){if(file_exists($filepath=$path.$config->getclassesdirname().'/'.$classname.'.php')){sr::includeonce($filepath);break;}}}public static function initialize(){self::$soterconfig=new soter_config();soter_logger_writer_dispatcher::initialize();if(function_exists('__autoload')){spl_autoload_register('__autoload');}spl_autoload_register(array('Soter','classAutoloader'));if(get_magic_quotes_gpc()){$striplist=array('_GET','_POST','_COOKIE');foreach($striplist as $val){global $$val;$$val=sr::stripslashes($$val);}}return self::$soterconfig;}public static function&getconfig(){return self::$soterconfig;}public static function run(){if(sr::ispluginmode()){self::runplugin();}elseif(sr::iscli()){self::runcli();}else{$canrunweb=!sr::config()->getismaintainmode();if(!$canrunweb){foreach(sr::config()->getmaintainipwhitelist()as $ip){$info=explode('/',$ip);$netmask=empty($info[1])?'32':$info[1];if(sr::ipinfo(sr::clientip().'/'.$netmask,'netaddress')==sr::ipinfo($info[0].'/'.$netmask,'netaddress')){$canrunweb=true;break;}}}if($canrunweb){self::runweb();}else{$handle=sr::config()->getmaintainmodehandle();if(is_object($handle)){$handle->handle();}}}}private static function runweb(){$config=self::getconfig();$sessionconfig=$config->getsessionconfig();@ini_set('session.auto_start',0);@ini_set('session.gc_probability',1);@ini_set('session.gc_divisor',100);@ini_set('session.gc_maxlifetime',$sessionconfig['lifetime']);@ini_set('session.referer_check','');@ini_set('session.entropy_file','/dev/urandom');@ini_set('session.entropy_length',16);@ini_set('session.use_cookies',1);@ini_set('session.use_only_cookies',1);@ini_set('session.use_trans_sid',0);@ini_set('session.hash_function',1);@ini_set('session.hash_bits_per_character',5);session_cache_limiter('nocache');session_set_cookie_params($sessionconfig['lifetime'],$sessionconfig['cookie_path'],preg_match('/^[^\\.]+$/',sr::server('HTTP_HOST'))?null:$sessionconfig['cookie_domain']);session_name($sessionconfig['session_name']);register_shutdown_function('session_write_close');$sessionhandle=$config->getsessionhandle();if($sessionhandle&&$sessionhandle instanceof soter_session){$sessionhandle->init();}if($sessionconfig['autostart']){sr::sessionstart();}$class='';$method='';foreach($config->getrouters()as $router){$route=$router->find($config->getrequest());if($route->found()){$config->setroute($route);$class=$route->getcontroller();$method=$route->getmethod();break;}}$_route=sr::config()->getroute();if(empty($class)){$class=$config->getcontrollerdirname().'_'.$config->getdefaultcontroller();$_route->setcontroller($class);}if(empty($method)){$method=$config->getmethodprefix().$config->getdefaultmethod();$_route->setmethod($method);}$config->setroute($_route);$controllerobject=new $class();if(!($controllerobject instanceof soter_controller)){throw new soter_exception_500('[ '.$class.' ] not a valid Soter_Controller');}if(!method_exists($controllerobject,$method)){throw new soter_exception_404('Method [ '.$class.'->'.$method.'() ] not found');}$cacheclassname=preg_replace('/^'.sr::config()->getcontrollerdirname().'_/','',$class);$cachemethodname=preg_replace('/^'.sr::config()->getmethodprefix().'/','',$method);$methokey=$cacheclassname.'::'.$cachemethodname;$cachemethodconfig=$config->getmethodcacheconfig();if(!empty($cachemethodconfig)&&isset($cachemethodconfig[$methokey])&&$cachemethodconfig[$methokey]['cache']&&($cachemethokey=$cachemethodconfig[$methokey]['key']())){if(!($contents=sr::cache()->get($cachemethokey))){@ob_start();$response=call_user_func_array(array($controllerobject,$method),$route->getargs());$contents=@ob_get_contents();@ob_end_clean();$contents.=is_array($response)?sr::view()->set($response)->load("$cacheclassname/$cachemethodname"):$response;sr::cache()->set($cachemethokey,$contents,$cachemethodconfig[$methokey]['time']);}}else{$response=call_user_func_array(array($controllerobject,$method),$route->getargs());$contents=is_array($response)?sr::view()->set($response)->load("$cacheclassname/$cachemethodname"):$response;}echo $contents;}private static function runcli(){$task=sr::getopt('task');$hmvcmodulename=sr::getopt('hmvc');if(empty($task)){exit('require a task name,please use --task=<taskname>'."\n");}if(!empty($hmvcmodulename)){self::checkhmvc($hmvcmodulename);}if(strpos($task,'Soter_')===0){$taskname=$task;}else{$taskname=soter::getconfig()->gettaskdirname().'_'.$task;}if(!class_exists($taskname)){throw new soter_exception_404('class [ '.$taskname.' ] not found');}$taskobject=new $taskname();if(!($taskobject instanceof soter_task)){throw new soter_exception_500('[ '.$taskname.' ] not a valid Soter_Task');}$args=sr::getopt();$args=empty($args)?array():$args;$taskobject->execute(new soter_cliargs($args));}private static function runplugin(){}public static function checkhmvc($hmvcmodulename,$throwexception=true){if(!empty($hmvcmodulename)){$config=soter::getconfig();$hmvcmodules=$config->gethmvcmodules();if(empty($hmvcmodules[$hmvcmodulename])){if($throwexception){throw new soter_exception_404('Hmvc Module [ '.$hmvcmodulename.' ] not found, please check your config.');}else{return false;}}static $loadedmodules=array();$hmvcmoduledirname=$hmvcmodules[$hmvcmodulename];if(!isset($loadedmodules[$hmvcmodulename])){$loadedmodules[$hmvcmodulename]=1;$hmvcmodulepath=$config->getapplicationdir().$config->gethmvcdirname().'/'.$hmvcmoduledirname.'/';$config->setapplicationdir($hmvcmodulepath)->addmasterpackage($hmvcmodulepath)->bootstrap();}return $hmvcmoduledirname;}return false;}}class sr{const env_testing=1;const env_production=2;const env_development=3;static function arrayget($array,$key,$default=null){return isset($array[$key])?$array[$key]:$default;}static function dump(){echo!self::iscli()?'<pre style="line-height:1.5em;font-size:14px;">':"\n";@ob_start();$args=func_get_args();empty($args)?null:call_user_func_array('var_dump',$args);$html=@ob_get_clean();echo!self::iscli()?htmlentities($html):$html;echo!self::iscli()?"</pre>":"\n";}static function includeonce($filepath){static $includefiles=array();$key=self::realpath($filepath);if(!isset($includefiles[$key])){include $filepath;$includefiles[$key]=1;}}static function realpath($path,$addslash=false){$unipath=path_separator==':';if(strpos($path,':')===false&&strlen($path)&&$path{0}!='/'){$path=realpath('.').directory_separator.$path;}$path=str_replace(array('/','\\'),directory_separator,$path);$parts=array_filter(explode(directory_separator,$path),'strlen');$absolutes=array();foreach($parts as $part){if('.'==$part)continue;if('..'==$part){array_pop($absolutes);}else{$absolutes[]=$part;}}$path=implode(directory_separator,$absolutes);$path=$unipath?(strlen($path)&&$path{0}!='/'?'/'.$path:$path):$path;$path=str_replace(array('/','\\'),'/',$path);return $path.($addslash?'/':'');}static function iscli(){return php_sapi=='cli';}static function stripslashes($var){if(!get_magic_quotes_gpc()){return $var;}if(is_array($var)){foreach($var as $key=>$val){if(is_array($val)){$var[$key]=self::stripslashes($val);}else{$var[$key]=stripslashes($val);}}}elseif(is_string($var)){$var=stripslashes($var);}return $var;}static function business($businessname){$name=soter::getconfig()->getbusinessdirname().'_'.$businessname;$object=self::factory($name);if(!($object instanceof soter_business)){throw new soter_exception_500('[ '.$name.' ] not a valid Soter_Business');}return $object;}static function dao($daoname){$name=soter::getconfig()->getdaodirname().'_'.$daoname;$object=self::factory($name);if(!($object instanceof soter_dao)){throw new soter_exception_500('[ '.$name.' ] not a valid Soter_Dao');}return $object;}static function model($modelname){$name=soter::getconfig()->getmodeldirname().'_'.$modelname;$object=self::factory($name);if(!($object instanceof soter_model)){throw new soter_exception_500('[ '.$name.' ] not a valid Soter_Model');}return $object;}static function library($classname){return self::factory($classname);}static function functions($functionfilename){static $loadedfunctionsfile=array();if(isset($loadedfunctionsfile[$functionfilename])){return;}else{$loadedfunctionsfile[$functionfilename]=1;}$config=soter::getconfig();$found=false;foreach($config->getpackages()as $packagepath){$filepath=$packagepath.$config->getfunctionsdirname().'/'.$functionfilename.'.php';if(file_exists($filepath)){self::includeonce($filepath);$found=true;break;}}if(!$found){throw new soter_exception_404('functions file [ '.$functionfilename.'.php ] not found');}}static function factory($classname,$hmvcmodulename=null){if(sr::ispluginmode()){soter::checkhmvc($hmvcmodulename);}if(sr::strendswith(strtolower($classname),'.php')){$classname=substr($classname,0,strlen($classname)-4);}$classname=str_replace('/','_',$classname);if(!class_exists($classname)){throw new soter_exception_404("class [ $classname ] not found");}return new $classname();}static function ispluginmode(){return(defined('SOTER_RUN_MODE_PLUGIN')&&soter_run_mode_plugin);}static function&config($configname=null){if(empty($configname)){return soter::getconfig();}$_info=explode('.',$configname);$configfilename=current($_info);static $loadedconfig=array();$cfg=null;if(isset($loadedconfig[$configfilename])){$cfg=$loadedconfig[$configfilename];}else{$config=soter::getconfig();$found=false;foreach($config->getpackages()as $packagepath){$filepath=$packagepath.$config->getconfigdirname().'/'.$config->getconfigcurrentdirname().'/'.$configfilename.'.php';$filedefaultpath=$packagepath.$config->getconfigdirname().'/default/'.$configfilename.'.php';$contents='';if(file_exists($filepath)){$contents=file_get_contents($filepath);}elseif(file_exists($filedefaultpath)){$contents=file_get_contents($filedefaultpath);}if($contents){$cfg=eval('?>'.$contents);$loadedconfig[$configfilename]=$cfg;$found=true;break;}}if(!$found){throw new soter_exception_404('config file [ '.$configfilename.'.php ] not found');}}if($cfg&&count($_info)>1){array_shift($_info);$keystrarray='';foreach($_info as $k){$keystrarray.="['".$k."']";}$val=eval('return isset($cfg'.$keystrarray.')?$cfg'.$keystrarray.':null;');return $val;}else{return $cfg;}}static function getopt($key=null){if(!self::iscli()){return null;}$noopt=array();static $result=array();static $parsed=false;if(!$parsed){$parsed=true;$params=self::arrayget($globals,'argv',array());reset($params);while(list($tmp,$p)=each($params)){if($p{0}=='-'){$pname=substr($p,1);$value=true;if($pname{0}=='-'){$pname=substr($pname,1);if(strpos($p,'=')!==false){list($pname,$value)=explode('=',substr($p,2),2);}}$nextparm=current($params);if(!in_array($pname,$noopt)&&$value===true&&$nextparm!==false&&$nextparm{0}!='-'){list($tmp,$value)=each($params);}$result[$pname]=$value;}else{$result[]=$p;}}}return empty($key)?$result:(isset($result[$key])?$result[$key]:null);}static function get($key=null,$default=null,$xssclean=false){$value=is_null($key)?$_get:self::arrayget($_get,$key,$default);return $xssclean?self::xssclean($value):$value;}static function getpost($key,$default=null,$xssclean=false){$getvalue=self::arrayget($_get,$key);$value=is_null($getvalue)?self::arrayget($_post,$key,$default):$getvalue;return $xssclean?self::xssclean($value):$value;}static function post($key=null,$default=null,$xssclean=false){$value=is_null($key)?$_post:self::arrayget($_post,$key,$default);return $xssclean?self::xssclean($value):$value;}static function postget($key,$default=null,$xssclean=false){$postvalue=self::arrayget($_post,$key);$value=is_null($postvalue)?self::arrayget($_get,$key,$default):$postvalue;return $xssclean?self::xssclean($value):$value;}static function session($key=null,$default=null,$xssclean=false){self::sessionstart();$value=is_null($key)?$_session:self::arrayget($_session,$key,$default);return $xssclean?self::xssclean($value):$value;}static function sessionset($key=null,$value=null){self::sessionstart();if(is_array($key)){$_session=array_merge($_session,$key);}else{$_session[$key]=$value;}}static function server($key=null,$default=null){return is_null($key)?$_server:self::arrayget($_server,strtoupper($key),$default);}static function postrawbody(){return file_get_contents('php://input');}static function cookie($key=null,$default=null,$xssclean=false){$key=is_null($key)?null:sr::config()->getcookieprefix().$key;$value=self::cookieraw($key,$default,$xssclean);return $xssclean?self::xssclean($value):$value;}static function cookieraw($key=null,$default=null,$xssclean=false){$value=is_null($key)?$_cookie:self::arrayget($_cookie,$key,$default);return $xssclean?self::xssclean($value):$value;}static function setcookie($key,$value,$life=null,$path='/',$domian=null,$http_only=false){$key=sr::config()->getcookieprefix().$key;return self::setcookieraw($key,$value,$life,$path,$domian,$http_only);}static function setcookieraw($key,$value,$life=null,$path='/',$domian=null,$httponly=false){header('P3P: CP="CURa ADMa DEVa PSAo PSDo OUR BUS UNI PUR INT DEM STA PRE COM NAV OTC NOI DSP COR"');if(!is_null($domian)){$autodomain=$domian;}else{$host=self::server('HTTP_HOST');$is_ip=preg_match('/^((25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(25[0-5]|2[0-4]\d|[01]?\d\d?)$/',$host);$notregulardomain=preg_match('/^[^\\.]+$/',$host);if($is_ip){$autodomain=$host;}elseif($notregulardomain){$autodomain=null;}else{$autodomain='.'.$host;}}setcookie($key,$value,($life?$life+time():null),$path,$autodomain,(self::server('SERVER_PORT')==443?1:0),$httponly);$_cookie[$key]=$value;}static function xssclean($var){if(is_array($var)){foreach($var as $key=>$val){if(is_array($val)){$var[$key]=self::xss_clean($val);}else{$var[$key]=self::xssclean0($val);}}}elseif(is_string($var)){$var=self::xssclean0($var);}return $var;}private static function xssclean0($data){$data=str_replace(array('&amp;','&lt;','&gt;'),array('&amp;amp;','&amp;lt;','&amp;gt;'),$data);$data=preg_replace('/(&#*\w+)[\x00-\x20]+;/u','$1;',$data);$data=preg_replace('/(&#x*[0-9A-F]+);*/iu','$1;',$data);$data=html_entity_decode($data,ent_compat,'UTF-8');$data=preg_replace('#(<[^>]+?[\x00-\x20"\'])(?:on|xmlns)[^>]*+>#iu','$1>',$data);$data=preg_replace('#([a-z]*)[\x00-\x20]*=[\x00-\x20]*([`\'"]*)[\x00-\x20]*j[\x00-\x20]*a[\x00-\x20]*v[\x00-\x20]*a[\x00-\x20]*s[\x00-\x20]*c[\x00-\x20]*r[\x00-\x20]*i[\x00-\x20]*p[\x00-\x20]*t[\x00-\x20]*:#iu','$1=$2nojavascript...',$data);$data=preg_replace('#([a-z]*)[\x00-\x20]*=([\'"]*)[\x00-\x20]*v[\x00-\x20]*b[\x00-\x20]*s[\x00-\x20]*c[\x00-\x20]*r[\x00-\x20]*i[\x00-\x20]*p[\x00-\x20]*t[\x00-\x20]*:#iu','$1=$2novbscript...',$data);$data=preg_replace('#([a-z]*)[\x00-\x20]*=([\'"]*)[\x00-\x20]*-moz-binding[\x00-\x20]*:#u','$1=$2nomozbinding...',$data);$data=preg_replace('#(<[^>]+?)style[\x00-\x20]*=[\x00-\x20]*[`\'"]*.*?expression[\x00-\x20]*\([^>]*+>#i','$1>',$data);$data=preg_replace('#(<[^>]+?)style[\x00-\x20]*=[\x00-\x20]*[`\'"]*.*?behaviour[\x00-\x20]*\([^>]*+>#i','$1>',$data);$data=preg_replace('#(<[^>]+?)style[\x00-\x20]*=[\x00-\x20]*[`\'"]*.*?s[\x00-\x20]*c[\x00-\x20]*r[\x00-\x20]*i[\x00-\x20]*p[\x00-\x20]*t[\x00-\x20]*:*[^>]*+>#iu','$1>',$data);$data=preg_replace('#</*\w+:\w[^>]*+>#i','',$data);do{$old_data=$data;$data=preg_replace('#</*(?:applet|b(?:ase|gsound|link)|embed|iframe|frame(?:set)?|i(?:frame|layer)|l(?:ayer|ink)|meta|object|s(?:cript|tyle)|title|xml)[^>]*+>#i','',$data);}while($old_data!==$data);return $data;}static function hostname(){return function_exists('gethostname')?gethostname():(function_exists('php_uname')?php_uname('n'):'unknown');}static function serverip(){return self::iscli()?gethostbyname(self::hostname()):sr::server('SERVER_ADDR');}static function clientip(){if($ip=self::checkclientip(sr::arrayget($_server,'HTTP_X_FORWARDED_FOR'))){return $ip;}elseif($ip=self::server('HTTP_CLIENT_IP')){return $ip;}elseif($ip=sr::arrayget($_server,'REMOTE_ADDR')){return $ip;}elseif($ip=self::checkclientip(getenv("HTTP_X_FORWARDED_FOR"))){return $ip;}elseif($ip=getenv("HTTP_CLIENT_IP")){return $ip;}elseif($ip=getenv("REMOTE_ADDR")){return $ip;}else{return "Unknown";}}private static function checkclientip($ip){if(empty($ip)){return false;}$whitelist=sr::config()->getbackendserveripwhitelist();foreach($whitelist as $okayip){if($okayip==$ip){return $ip;}}return false;}static function strbeginswith($str,$sub){return(substr($str,0,strlen($sub))==$sub);}static function strendswith($str,$sub){return(substr($str,strlen($str)-strlen($sub))==$sub);}static function ipinfo($ipaddr,$key=null){$ipaddr=str_replace(" ","",$ipaddr);$arr=explode('/',$ipaddr);$ipaddr=$arr[0];$ipaddrarr=explode('.',$ipaddr);foreach($ipaddrarr as&$v){$v=intval($v);}$ipaddr=implode('.',$ipaddrarr);$netbits=intval((isset($arr[1])?$arr[1]:0));$subnetmask=long2ip(ip2long("255.255.255.255")<<(32-$netbits));$ip=ip2long($ipaddr);$nm=ip2long($subnetmask);$nw=($ip&$nm);$bc=$nw|(~$nm);$ips=array();$ips['netmask']=long2ip($nm);$ips['count']=($bc-$nw-1);if($ips['count']<=0){$ips['count']+=4294967296;}if($netbits==32){$ips['count']=0;$ips['start']=long2ip($ip);$ips['end']=long2ip($ip);}else{$ips['start']=long2ip($nw+1);$ips['end']=long2ip($bc-1);}$bc=sprintf('%u',$bc);$nw=sprintf('%u',$nw);$ips['netaddress']=long2ip($nw);$ips['broadcast']=long2ip($bc);return is_null($key)?$ips:$ips[$key];}static function&db($group=''){static $instances=array();if(is_array($group)){ksort($group);$key=md5(var_export($group,true));if(!isset($instances[$key])){$instances[$key]=new soter_database_activerecord($group);}return $instances[$key];}else{if(empty($group)){$config=self::config()->getdatabseconfig();$group=$config['default_group'];}if(!isset($instances[$group])){$config=self::config()->getdatabseconfig($group);if(empty($config)){throw new soter_exception_database('unknown database config group [ '.$group.' ]');}$instances[$group]=new soter_database_activerecord($config);}return $instances[$group];}}static function createsqlite3database($path){return new pdo('sqlite:'.$path);}static function microtime(){list($s1,$s2)=explode(' ',microtime());$currenttime=(float) sprintf('%.0f',(floatval($s1)+floatval($s2))*1000);return $currenttime;}static function safepath($path){if(!$path){return '';}$path=self::realpath($path);$siteroot=self::realpath(self::server('DOCUMENT_ROOT'));$_path=str_replace($siteroot,'',$path);$relpath=str_replace($siteroot,'',rtrim(self::config()->getapplicationdir(),'/'));return '~APPPATH~'.str_replace($relpath,'',$_path);}static function cache($cachehandle=null){if($cachehandle){self::config()->setcachehandle($cachehandle);}return self::config()->getcachehandle();}static function rmdir($dirpath,$includeself=true){if(empty($dirpath)){return false;}$dirpath=self::realpath($dirpath).'/';foreach(scandir($dirpath)as $value){if($value=='.'||$value=='..'){continue;}$path=$dirpath.$value;if(is_dir($path)){self::rmdir($path);@rmdir($path);}else{@unlink($path);}}if($includeself){@rmdir($dirpath);}return true;}static function view(){static $view;if(!$view){$view=new soter_view();}return $view;}static function urlpath($subpath=null,$addslash=true){if(self::iscli()){throw new soter_exception_500('urlPath() can not be used in cli mode');}else{$old_path=getcwd();$root=str_replace(array("/","\\"),'/',self::server('DOCUMENT_ROOT'));chdir($root);$root=getcwd();$root=str_replace(array("/","\\"),'/',$root);chdir($old_path);$path=str_replace(array("/","\\"),'/',realpath('.').($subpath?'/'.trim($subpath,'/\\'):''));$path=self::realpath($path).($addslash?'/':'');return str_replace($root,'',$path);}}static function url($action='',$getdata=array()){$index=self::config()->getisrewrite()?'':self::config()->getindexname().'/';$url=self::urlpath($index.$action);$url=rtrim($url,'/');$url=$index?$url:($action?$url:$url.'/');if(!empty($getdata)){$url=$url.'?';foreach($getdata as $k=>$v){$url.=$k.'='.urlencode($v).'&';}$url=rtrim($url,'&');}return $url;}static function readdata(array $map,$sourcedata=null){$data=array();$formdata=is_null($sourcedata)?sr::post():$sourcedata;foreach($formdata as $formkey=>$val){if(isset($map[$formkey])){$data[$map[$formkey]]=$val;}}return $data;}static function checkdata($data,$rules,&$returndata,&$errormessage,&$db=null){static $checkrules;if(empty($checkrules)){$defaultrules=array('array'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){if(!isset($data[$key])||!is_array($value)){return false;}$minokay=true;if(isset($args[0])){$minokay=count($value)>=intval($args[0]);}$maxokay=true;if(isset($args[1])){$minokay=count($value)>=intval($args[1]);}return $minokay&&$maxokay;},'notArray'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){return!is_array($value);},'default'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){if(is_array($value)){$i=0;foreach($value as $k=>$v){$returnvalue[$k]=empty($v)?(isset($args[$i])?$args[$i]:$args[0]):$v;$i++;}}elseif(empty($value)){$returnvalue=$args[0];}return true;},'optional'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){$break=!isset($data[$key]);return true;},'required'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){if(!isset($data[$key])||empty($value)){return false;}$value=(array) $value;foreach($value as $v){if(empty($v)){return false;}}return true;},'requiredKey'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){$args[]=$key;$args=array_unique($args);foreach($args as $k){if(!isset($data[$k])){return false;}}return true;},'functions'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){if(!isset($data[$key])){return true;}$returnvalue=$value;if(is_array($returnvalue)){foreach($returnvalue as $k=>$v){foreach($args as $function){$returnvalue[$k]=$function($v);}}}else{foreach($args as $function){$returnvalue=$function($returnvalue);}}return true;},'xss'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){if(!isset($data[$key])){return true;}$returnvalue=self::xssclean($value);return true;},'match'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){if(!isset($data[$key])||!isset($args[0])||!isset($data[$args[0]])||$value!=$data[$args[0]]){return false;}return true;},'equal'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){if(!isset($data[$key])||!isset($args[0])||$value!=$args[0]){return false;}return true;},'enum'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){if(!isset($data[$key])){return false;}$value=(array) $value;foreach($value as $v){if(!in_array($v,$args)){return false;}}return true;},'unique'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){if(!isset($data[$key])||!$value||!count($args)){return false;}$_info=explode('.',$args[0]);if(count($_info)!=2){return false;}$table=$_info[0];$col=$_info[1];if(isset($args[1])){$_id_info=explode(':',$args[1]);if(count($_id_info)!=2){return false;}$id_col=$_id_info[0];$id=$_id_info[1];$id=stripos($id,'#')===0?sr::getpost(substr($id,1)):$id;$where=array($col=>$value,"$id_col <>"=>$id);}else{$where=array($col=>$value);}return!$db->where($where)->from($table)->execute()->total();},'exists'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){if(!isset($data[$key])||!$value||!count($args)){return false;}$_info=explode('.',$args[0]);if(count($_info)!=2){return false;}$table=$_info[0];$col=$_info[1];$where=array($col=>$value);if(count($args)>1){foreach(array_slice($args,1)as $v){$_id_info=explode(':',$v);if(count($_id_info)!=2){continue;}$id_col=$_id_info[0];$id=$_id_info[1];$id=stripos($id,'#')===0?sr::getpost(substr($id,1)):$id;$where[$id_col]=$id;}}return $db->where($where)->from($table)->execute()->total();},'min_len'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){if(!isset($data[$key])){return false;}$v=(array) $value;foreach($v as $value){$okay=isset($args[0])?(mb_strlen($value,'UTF-8')>=intval($args[0])):false;if(!$okay){return false;}}return true;},'max_len'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){if(!isset($data[$key])){return false;}$v=(array) $value;foreach($v as $value){$okay=isset($args[0])?(mb_strlen($value,'UTF-8')<=intval($args[0])):false;if(!$okay){return false;}}return true;},'range_len'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){if(!isset($data[$key])){return false;}$v=(array) $value;foreach($v as $value){$okay=count($args)==2?(mb_strlen($value,'UTF-8')>=intval($args[0]))&&(mb_strlen($value,'UTF-8')<=intval($args[1])):false;if(!$okay){return false;}}return true;},'len'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){if(!isset($data[$key])){return false;}$v=(array) $value;foreach($v as $value){$okay=isset($args[0])?(mb_strlen($value,'UTF-8')==intval($args[0])):false;if(!$okay){return false;}}return true;},'min'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){if(!isset($data[$key])){return false;}$v=(array) $value;foreach($v as $value){$okay=isset($args[0])&&is_numeric($value)?$value>=$args[0]:false;if(!$okay){return false;}}return true;},'max'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){if(!isset($data[$key])){return false;}$v=(array) $value;foreach($v as $value){$okay=isset($args[0])&&is_numeric($value)?$value<=$args[0]:false;if(!$okay){return false;}}return true;},'range'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){if(!isset($data[$key])){return false;}$v=(array) $value;foreach($v as $value){$okay=(count($args)==2)&&is_numeric($value)?$value>=$args[0]&&$value<=$args[1]:false;if(!$okay){return false;}}return true;},'alpha'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){if(!isset($data[$key])){return false;}$v=(array) $value;foreach($v as $value){$okay=!preg_match('/[^A-Za-z]+/',$value);if(!$okay){return false;}}return true;},'alpha_num'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){if(!isset($data[$key])){return false;}$v=(array) $value;foreach($v as $value){$okay=!preg_match('/[^A-Za-z0-9]+/',$value);if(!$okay){return false;}}return true;},'alpha_dash'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){if(!isset($data[$key])){return false;}$v=(array) $value;foreach($v as $value){$okay=!preg_match('/[^A-Za-z0-9_-]+/',$value);if(!$okay){return false;}}return true;},'alpha_start'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){if(!isset($data[$key])){return false;}$v=(array) $value;foreach($v as $value){$okay=preg_match('/^[A-Za-z]+/',$value);if(!$okay){return false;}}return true;},'num'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){if(!isset($data[$key])){return false;}$v=(array) $value;foreach($v as $value){$okay=!preg_match('/[^0-9]+/',$value);if(!$okay){return false;}}return true;},'int'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){if(!isset($data[$key])){return false;}$v=(array) $value;foreach($v as $value){$okay=preg_match('/^([-+]?[1-9]\d*|0)$/',$value);if(!$okay){return false;}}return true;},'float'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){if(!isset($data[$key])){return false;}$v=(array) $value;foreach($v as $value){$okay=preg_match('/^([1-9]\d*|0)\.\d+$/',$value);if(!$okay){return false;}}return true;},'numeric'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){if(!isset($data[$key])){return false;}$v=(array) $value;foreach($v as $value){$okay=is_numeric($value);if(!$okay){return false;}}return true;},'natural'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){if(!isset($data[$key])){return false;}$v=(array) $value;foreach($v as $value){$okay=preg_match('/^([1-9]\d*|0)$/',$value);if(!$okay){return false;}}return true;},'natural_no_zero'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){if(!isset($data[$key])){return false;}$v=(array) $value;foreach($v as $value){$okay=preg_match('/^[1-9]\d*$/',$value);if(!$okay){return false;}}return true;},'email'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){if(!isset($data[$key])){return false;}$args[0]=isset($args[0])&&$args[0]=='true'?true:false;$v=(array) $value;foreach($v as $value){$okay=!empty($value)?preg_match('/^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/',$value):$args[0];if(!$okay){return false;}}return true;},'url'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){if(!isset($data[$key])){return false;}$args[0]=isset($args[0])&&$args[0]=='true'?true:false;$v=(array) $value;foreach($v as $value){$okay=!empty($value)?preg_match('/^http[s]?:\/\/[A-Za-z0-9]+\.[A-Za-z0-9]+[\/=\?%\-&_~`@[\]\':+!]*([^<>\"])*$/',$value):$args[0];if(!$okay){return false;}}return true;},'qq'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){if(!isset($data[$key])){return false;}$args[0]=isset($args[0])&&$args[0]=='true'?true:false;$v=(array) $value;foreach($v as $value){$okay=!empty($value)?preg_match('/^[1-9][0-9]{4,}$/',$value):$args[0];if(!$okay){return false;}}return true;},'phone'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){if(!isset($data[$key])){return false;}$args[0]=isset($args[0])&&$args[0]=='true'?true:false;$v=(array) $value;foreach($v as $value){$okay=!empty($value)?preg_match('/^(?:\d{3}-?\d{8}|\d{4}-?\d{7})$/',$value):$args[0];if(!$okay){return false;}}return true;},'mobile'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){if(!isset($data[$key])){return false;}$args[0]=isset($args[0])&&$args[0]=='true'?true:false;$v=(array) $value;foreach($v as $value){$okay=!empty($value)?preg_match('/^(((13[0-9]{1})|(15[0-9]{1})|(18[0-9]{1})|(14[0-9]{1}))+\d{8})$/',$value):$args[0];if(!$okay){return false;}}return true;},'zipcode'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){if(!isset($data[$key])){return false;}$args[0]=isset($args[0])&&$args[0]=='true'?true:false;$v=(array) $value;foreach($v as $value){$okay=!empty($value)?preg_match('/^[1-9]\d{5}(?!\d)$/',$value):$args[0];if(!$okay){return false;}}return true;},'idcard'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){if(!isset($data[$key])){return false;}$args[0]=isset($args[0])&&$args[0]=='true'?true:false;$v=(array) $value;foreach($v as $value){$okay=!empty($value)?preg_match('/^\d{14}(\d{4}|(\d{3}[xX])|\d{1})$/',$value):$args[0];if(!$okay){return false;}}return true;},'ip'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){if(!isset($data[$key])){return false;}$args[0]=isset($args[0])&&$args[0]=='true'?true:false;$v=(array) $value;foreach($v as $value){$okay=!empty($value)?preg_match('/^((25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(25[0-5]|2[0-4]\d|[01]?\d\d?)$/',$value):$args[0];if(!$okay){return false;}}return true;},'chs'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){if(!isset($data[$key])){return false;}$count=implode(',',array_slice($args,1,2));$count=empty($count)?'1,':$count;$can_empty=isset($args[0])&&$args[0]=='true';$v=(array) $value;foreach($v as $value){$okay=!empty($value)?preg_match('/^[\x{4e00}-\x{9fa5}]{'.$count.'}$/u',$value):$can_empty;if(!$okay){return false;}}return true;},'date'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){if(!isset($data[$key])){return false;}$args[0]=isset($args[0])&&$args[0]=='true'?true:false;$v=(array) $value;foreach($v as $value){$okay=!empty($value)?preg_match('/^[0-9]{4}-(((0[13578]|(10|12))-(0[1-9]|[1-2][0-9]|3[0-1]))|(02-(0[1-9]|[1-2][0-9]))|((0[469]|11)-(0[1-9]|[1-2][0-9]|30)))$/',$value):$args[0];if(!$okay){return false;}}return true;},'time'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){if(!isset($data[$key])){return false;}$args[0]=isset($args[0])&&$args[0]=='true'?true:false;$v=(array) $value;foreach($v as $value){$okay=!empty($value)?preg_match('/^(([0-1][0-9])|([2][0-3])):([0-5][0-9])(:([0-5][0-9]))$/',$value):$args[0];if(!$okay){return false;}}return true;},'datetime'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){if(!isset($data[$key])){return false;}$args[0]=isset($args[0])&&$args[0]=='true'?true:false;$v=(array) $value;foreach($v as $value){$okay=!empty($value)?preg_match('/^[0-9]{4}-(((0[13578]|(10|12))-(0[1-9]|[1-2][0-9]|3[0-1]))|(02-(0[1-9]|[1-2][0-9]))|((0[469]|11)-(0[1-9]|[1-2][0-9]|30))) (([0-1][0-9])|([2][0-3])):([0-5][0-9])(:([0-5][0-9]))$/',$value):$args[0];if(!$okay){return false;}}return true;},'reg'=>function($key,$value,$data,$args,&$returnvalue,&$break,&$db){if(!isset($data[$key])){return false;}$v=(array) $value;foreach($v as $value){$okay=!empty($args[0])?preg_match($args[0],$value):false;if(!$okay){return false;}}return true;});$userrules=sr::config()->getdatacheckrules();$checkrules=(is_array($userrules)&&!empty($userrules))?array_merge($defaultrules,$userrules):$defaultrules;}$getcheckruleinfo=function($_rule){$matches=array();preg_match('|([^\[]+)(?:\[(.*)\](.?))?|',$_rule,$matches);$matches[1]=isset($matches[1])?$matches[1]:'';$matches[3]=!empty($matches[3])?$matches[3]:',';$matches[2]=isset($matches[2])?explode($matches[3],$matches[2]):array();return $matches;};$returndata=$data;foreach($rules as $key=>$keyrules){foreach($keyrules as $rule=>$message){$matches=$getcheckruleinfo($rule);$_v=self::arrayget($returndata,$key);$_r=$matches[1];$args=$matches[2];if(!isset($checkrules[$_r])||!is_callable($checkrules[$_r])){throw new soter_exception_500('error rule [ '.$_r.' ]');}$rulefunction=$checkrules[$_r];$db=(is_object($db)&&($db instanceof soter_database_activerecord))?$db:sr::db();$break=false;$returnvalue=null;$isokay=$rulefunction($key,$_v,$data,$args,$returnvalue,$break,$db);if(!$isokay){$errormessage=$message;return false;}if(!is_null($returnvalue)){$returndata[$key]=$returnvalue;}if($break){break;}}}return true;}static function sessionstart(){if(!isset($_session)){session_start();}}static function page($total,$page,$pagesize,$url,$order=array(1,2,3,4,5,6),$a_count=10){$a_num=$a_count;$first='首页';$last='尾页';$pre='上页';$next='下页';$a_num=$a_num%2==0?$a_num+1:$a_num;$pages=ceil($total/$pagesize);$curpage=intval($page)?intval($page):1;$curpage=$curpage>$pages||$curpage<=0?1:$curpage;$body='<span class="page_body">';$prefix='';$subfix='';$start=$curpage-($a_num-1)/2;$end=$curpage+($a_num-1)/2;$start=$start<=0?1:$start;$end=$end>$pages?$pages:$end;if($pages>=$a_num){if($curpage<=($a_num-1)/2){$end=$a_num;}if($end-$curpage<=($a_num-1)/2){$start-=floor($a_num/2)-($end-$curpage);}}for($i=$start;$i<=$end;$i++){if($i==$curpage){$body.='<a class="page_cur_page" href="javascript:void(0);"><b>'.$i.'</b></a>';}else{$body.='<a href="'.str_replace('{page}',$i,$url).'">'.$i.'</a>';}}$body.='</span>';$prefix=($curpage==1?'':'<span class="page_bar_prefix"><a href="'.str_replace('{page}',1,$url).'">'.$first.'</a><a href="'.str_replace('{page}',$curpage-1,$url).'">'.$pre.'</a></span>');$subfix=($curpage==$pages?'':'<span class="page_bar_subfix"><a href="'.str_replace('{page}',$curpage+1,$url).'">'.$next.'</a><a href="'.str_replace('{page}',$pages,$url).'">'.$last.'</a></span>');$info="<span class=\"page_cur\">第{$curpage}/{$pages}页</span>";$id="gsd09fhas9d".rand(100000,1000000);$go='<script>function ekup(){if(event.keyCode==13){clkyup();}}function clkyup(){var num=document.getElementById(\''.$id.'\').value;if(!/^\d+$/.test(num)||num<=0||num>'.$pages.'){alert(\'请输入正确页码!\');return;};location=\''.addslashes($url).'\'.replace(/\\{page\\}/,document.getElementById(\''.$id.'\').value);}</script><span class="page_input_num"><input onkeyup="ekup()" type="text" id="'.$id.'" style="width:40px;vertical-align:text-baseline;padding:0 2px;font-size:10px;border:1px solid gray;"/></span><span class="page_btn_go" onclick="clkyup();" style="cursor:pointer;">转到</span>';$total="<span class=\"page_total\">共{$total}条</span>";$pagination=array($total,$info,$prefix,$body,$subfix,$go);$output=array();if(is_null($order)){$order=array(1,2,3,4,5,6);}foreach($order as $key){if(isset($pagination[$key-1])){$output[]=$pagination[$key-1];}}return $pages>1?implode("",$output):'';}static function json(){$args=func_get_args();$handle=sr::config()->getoutputjsonrender();if(is_callable($handle)){return call_user_func_array($handle,$args);}else{return '';}}static function redirect($url,$msg=null,$time=3,$view=null){$time=intval($time)?intval($time):3;header("refresh:{$time};url={$url}");header("Content-type: text/html; charset=utf-8");if(empty($view)){echo $msg;}else{self::view()->set(array('msg'=>$msg,'url'=>$url,'time'=>$time))->load($view);}exit();}static function message($msg,$url=null,$time=3,$view=null){$time=intval($time)?intval($time):3;if(!empty($url)){header("refresh:{$time};url={$url}");}header("Content-type: text/html; charset=utf-8");if(!empty($view)){self::view()->set(array('msg'=>$msg,'url'=>$url,'time'=>$time))->load($view);}else{echo $msg;}exit();}}class soter_pdo extends pdo{protected $transactioncounter=0;private $islast;public function isintransaction(){return!$this->islast;}public function begintransaction(){if(!$this->transactioncounter++){return parent::begintransaction();}$this->exec('SAVEPOINT trans'.$this->transactioncounter);return $this->transactioncounter>=0;}public function commit(){if(!--$this->transactioncounter){$this->islast=true;return parent::commit();}$this->islast=false;return $this->transactioncounter>=0;}public function rollback(){if(--$this->transactioncounter){$this->exec('ROLLBACK TO trans'.$this->transactioncounter+1);return true;}return parent::rollback();}}abstract class soter_database{private $drivertype,$database,$tableprefix,$pconnect,$debug,$charset,$collate,$tableprefixsqlidentifier,$slowquerytime,$slowqueryhandle,$slowquerydebug,$minindextype,$indexdebug,$indexhandle,$masters,$slaves,$connectionmasters,$connectionslaves,$_errormsg,$_lastsql,$_lastpdoinstance,$_isintransaction=false,$_config,$_lastinsertid=0,$_cachetime=0,$_cachekey,$_masterpdo=null,$_locked=false;public function __construct(array $config=array()){$this->setconfig($config);}public function&getlastpdoinstance(){return $this->_lastpdoinstance;}public function lock(){$this->_locked=true;return $this;}public function unlock(){$this->_locked=false;return $this;}public function islocked(){return $this->_locked;}public function lastid(){if(strtolower($this->getdrivertype())=='sqlite'){return $this->_lastinsertbatchcount>1?($this->_lastinsertid-$this->_lastinsertbatchcount+1):$this->_lastinsertid;}else{return $this->_lastinsertid;}}public function error(){return $this->_errormsg;}public function lastsql(){return $this->_lastsql;}public function getslowquerydebug(){return $this->slowquerydebug;}public function getminindextype(){return $this->minindextype;}public function getindexdebug(){return $this->indexdebug;}public function setslowquerydebug($slowquerydebug){$this->slowquerydebug=$slowquerydebug;return $this;}public function setminindextype($minindextype){$this->minindextype=$minindextype;return $this;}public function setindexdebug($indexdebug){$this->indexdebug=$indexdebug;return $this;}public function getslowquerytime(){return $this->slowquerytime;}public function&getslowqueryhandle(){return $this->slowqueryhandle;}public function&getindexhandle(){return $this->indexhandle;}public function setslowquerytime($slowquerytime){$this->slowquerytime=$slowquerytime;return $this;}public function setslowqueryhandle(soter_database_slowquery_handle $slowqueryhandle){$this->slowqueryhandle=$slowqueryhandle;return $this;}public function setindexhandle(soter_database_index_handle $indexhandle){$this->indexhandle=$indexhandle;return $this;}public function getconfig(){return $this->_config;}public function setconfig(array $config=array()){foreach(($this->_config=array_merge($this->getdefaultconfig(),$config))as $key=>$value){$this->{$key}=$value;}$this->connectionmasters=array();$this->connectionslaves=array();$this->_errormsg='';$this->_lastsql='';$this->_isintransaction=false;$this->_lastinsertid=0;$this->_lastpdoinstance=null;$this->_cachekey='';$this->_cachetime=0;$this->_masterpdo='';$this->_locked=false;}public function getdrivertype(){return $this->drivertype;}public function getmasters(){return $this->masters;}public function getmaster($key){return $this->masters[$key];}public function getslaves(){return $this->slaves;}public function getslave($key){return $this->slaves[$key];}public function getdatabase(){return $this->database;}public function gettableprefix(){return $this->tableprefix;}public function getpconnect(){return $this->pconnect;}public function getdebug(){return $this->debug;}public function getcharset(){return $this->charset;}public function getcollate(){return $this->collate;}public function gettableprefixsqlidentifier(){return $this->tableprefixsqlidentifier;}public function setdrivertype($drivertype){$this->drivertype=$drivertype;return $this;}public function setmasters($masters){$this->masters=$masters;return $this;}public function setslaves($slaves){$this->slaves=$slaves;return $this;}public function setdatabase($database){$this->database=$database;return $this;}public function settableprefix($tableprefix){$this->tableprefix=$tableprefix;return $this;}public function setpconnect($pconnect){$this->pconnect=$pconnect;return $this;}public function setdebug($debug){$this->debug=$debug;return $this;}public function setcharset($charset){$this->charset=$charset;return $this;}public function setcollate($collate){$this->collate=$collate;return $this;}public function settableprefixsqlidentifier($tableprefixsqlidentifier){$this->tableprefixsqlidentifier=$tableprefixsqlidentifier;return $this;}public static function getdefaultconfig(){return array('driverType'=>'mysql','debug'=>true,'pconnect'=>false,'charset'=>'utf8','collate'=>'utf8_general_ci','database'=>'','tablePrefix'=>'','tablePrefixSqlIdentifier'=>'_prefix_','slowQueryDebug'=>false,'slowQueryTime'=>3000,'slowQueryHandle'=>null,'indexDebug'=>true,'minIndexType'=>'ALL','indexHandle'=>null,'masters'=>array('master01'=>array('hostname'=>'127.0.0.1','port'=>3306,'username'=>'root','password'=>'',)),'slaves'=>array());}private function _issqlite(){return strtolower($this->getdrivertype())=='sqlite';}private function _ismysql(){return strtolower($this->getdrivertype())=='mysql';}private function _init(){$info=array('master'=>array('getMasters','connectionMasters',),'slave'=>array('getSlaves','connectionSlaves',),);$slaves=$this->getslaves();$masters=$this->getmasters();try{foreach($info as $type=>$group){$configgroup=$this->{$group[0]}();$connections=&$this->{$group[1]};foreach($configgroup as $key=>$config){if(!isset($connections[$key])){$options[pdo::attr_errmode]=pdo::errmode_exception;$options[pdo::attr_persistent]=$this->getpconnect();if($this->_ismysql()){$options[pdo::mysql_attr_init_command]='SET NAMES '.$this->getcharset().' COLLATE '.$this->getcollate();$options[pdo::attr_emulate_prepares]=true;$dsn='mysql:host='.$config['hostname'].';port='.$config['port'].';dbname='.$this->getdatabase().';charset='.$this->getcharset();$connections[$key]=new soter_pdo($dsn,$config['username'],$config['password'],$options);$connections[$key]->exec('SET NAMES '.$this->getcharset());}elseif($this->_issqlite()){if(!file_exists($this->getdatabase())){$this->_displayerror('sqlite3 database file ['.sr::realpath($this->getdatabase()).'] not found');}$connections[$key]=new soter_pdo('sqlite:'.$this->getdatabase(),null,null,$options);}else{throw new soter_exception_database('unknown driverType [ '.$this->getdrivertype().' ]');}}}}if(empty($this->connectionslaves)&&!empty($this->connectionmasters)){$this->connectionslaves[0]=$this->connectionmasters[array_rand($this->connectionmasters)];}if(empty($this->_masterpdo)&&!empty($this->connectionmasters)){$this->_masterpdo=$this->connectionmasters[array_rand($this->connectionmasters)];}return!(empty($this->connectionmasters)&&empty($this->connectionslaves));}catch(exception $e){$this->_displayerror($e);}}public function begin(){if(!$this->_init()){return false;}$this->_masterpdo->begintransaction();$this->_isintransaction=true;}public function commit(){if(!$this->_init()){return false;}$this->_masterpdo->commit();$this->_isintransaction=$this->_masterpdo->isintransaction();}public function rollback(){if(!$this->_init()){return false;}$this->_masterpdo->rollback();}public function cache($cachetime,$cachekey=''){$this->_cachetime=(int) $cachetime;$this->_cachekey=$cachekey;return $this;}private function _checkprefixidentifier($str){$prefix=$this->gettableprefix();$identifier=$this->gettableprefixsqlidentifier();return $identifier&&$prefix?str_replace($identifier,$prefix,$str):$str;}public function execute($sql='',array $values=array()){if(!$this->_init()){return false;}$starttime=sr::microtime();$sql=$sql?$this->_checkprefixidentifier($sql):$this->getsql();$this->_lastsql=$sql;$values=!empty($values)?$values:$this->_getvalues();$cachehandle=null;if($this->_cachetime){$cachehandle=sr::config()->getcachehandle();if(empty($cachehandle)){throw new soter_exception_500('no cache handle found , please set cache handle');}$key=empty($this->_cachekey)?md5($sql.var_export($values,true)):$this->_cachekey;$return=$cachehandle->get($key);if(!is_null($return)){return $return;}}$iswritetype=$this->_iswritetype($sql);$iswritetrowstype=$this->_iswriterowstype($sql);$iswriteinserttype=$this->_iswriteinserttype($sql);$return=false;try{if($this->_isintransaction){$pdo=&$this->_masterpdo;$this->_lastpdoinstance=&$pdo;if($sth=$pdo->prepare($sql)){if($iswritetype){$status=$sth->execute($values);$return=$iswritetrowstype?$sth->rowcount():$status;$this->_lastinsertid=$iswriteinserttype?$pdo->lastinsertid():0;}else{$return=$sth->execute($values)?$sth->fetchall(pdo::fetch_assoc):array();$return=new soter_database_resultset($return);}}else{$errorinfo=$pdo->errorinfo();$this->_displayerror($errorinfo[2],$errorinfo[1]);}}else{if($this->islocked()){$pdo=$this->_masterpdo;}else{if($iswritetype){$pdo=&$this->connectionmasters[array_rand($this->connectionmasters)];}else{$pdo=&$this->connectionslaves[array_rand($this->connectionslaves)];}}$this->_lastpdoinstance=&$pdo;if($sth=$pdo->prepare($sql)){if($iswritetype){$status=$sth->execute($values);$return=$iswritetrowstype?$sth->rowcount():$status;$this->_lastinsertid=$iswriteinserttype?$pdo->lastinsertid():0;}else{$return=$sth->execute($values)?$sth->fetchall(pdo::fetch_assoc):array();$return=new soter_database_resultset($return);}}else{$errorinfo=$pdo->errorinfo();$this->_displayerror($errorinfo[2],$errorinfo[1]);}}$usingtime=(sr::microtime()-$starttime).'';$explainrows=array();if($this->slowquerydebug&&$this->indexdebug){$sth=$this->connectionmasters[0]->prepare('EXPLAIN '.$sql);$sth->execute($this->_getvalues());$explainrows=$sth->fetchall(pdo::fetch_assoc);}if($this->slowquerydebug&&($usingtime>=$this->getslowquerytime())){if($this->slowqueryhandle instanceof soter_database_slowquery_handle){$this->slowqueryhandle->handle($sql,var_export($explainrows,true),$usingtime);}}if($this->indexdebug&&$this->indexhandle instanceof soter_database_index_handle){$badindex=false;if(strtolower($this->getdrivertype())=='mysql'){$order=array('system'=>1,'const'=>2,'eq_ref'=>3,'ref'=>4,'fulltext'=>5,'ref_or_null'=>6,'index_merge'=>7,'unique_subquery'=>8,'index_subquery'=>9,'range'=>10,'index'=>11,'all'=>12,);foreach($explainrows as $row){if(isset($order[strtolower($row['type'])])&&isset($order[strtolower($this->getminindextype())])){$key=$order[strtolower($row['type'])];$minkey=$order[strtolower($this->getminindextype())];if($key>$minkey){if(stripos($row['Extra'],'optimized')===false){$badindex=true;break;}}}}}elseif(strtolower($this->getdrivertype())=='sqlite'){}if($badindex){$this->indexhandle->handle($sql,var_export($explainrows,true),$usingtime);}}}catch(exception $exc){$this->_reset();$this->_displayerror($exc);}if($this->_cachetime){$key=empty($this->_cachekey)?md5($sql):$this->_cachekey;$cachehandle->set($key,$return,$this->_cachetime);}$this->_cachekey='';$this->_cachetime=0;$this->_reset();return $return;}private function _iswritetype($sql){if(!preg_match('/^\s*"?(SET|INSERT|UPDATE|DELETE|REPLACE|CREATE|DROP|TRUNCATE|LOAD DATA|COPY|ALTER|GRANT|REVOKE|LOCK|UNLOCK)\s+/i',$sql)){return false;}return true;}private function _iswriteinserttype($sql){if(!preg_match('/^\s*"?(INSERT|REPLACE)\s+/i',$sql)){return false;}return true;}private function _iswriterowstype($sql){if(!preg_match('/^\s*"?(INSERT|UPDATE|DELETE|REPLACE)\s+/i',$sql)){return false;}return true;}protected function _displayerror($message,$code=0){$sql=$this->_lastsql?' , '."\n".'with query : '.$this->_lastsql:'';if($message instanceof exception){$this->_errormsg=$message->getmessage().$sql;}else{$this->_errormsg=$message.$sql;}if($this->getdebug()||$this->_isintransaction){if($message instanceof exception){throw new soter_exception_database($this->_errormsg,500);}else{throw new soter_exception_database($message.$sql,$code);}}}public function getsqlvalues(){return $this->_getvalues();}public abstract function getsql();protected abstract function _getvalues();}class soter_database_activerecord extends soter_database{private $arselect,$arfrom,$arjoin,$arwhere,$argroupby,$arhaving,$arlimit,$arorderby,$arset,$arupdatebatch,$arinsert,$arinsertbatch,$_astable,$_ascolumn,$_values,$_sqltype,$_currentsql;protected $_lastinsertbatchcount=0;protected function _getvalues(){return $this->_values;}public function __construct(array $config=array()){parent::__construct($config);$this->_reset();}protected function _reset(){$this->arselect=array();$this->arfrom=array();$this->arjoin=array();$this->arwhere=array();$this->argroupby=array();$this->arhaving=array();$this->arorderby=array();$this->arlimit='';$this->arset=array();$this->arupdatebatch=array();$this->arinsert=array();$this->arinsertbatch=array();$this->_astable=array();$this->_ascolumn=array();$this->_values=array();$this->_sqltype='select';$this->_currentsql='';}public function select($select){foreach(explode(',',$select)as $key){$this->arselect[]=$key;}return $this;}public function from($from,$as=''){$this->arfrom=array($from,$as);if($as){$this->_astable[$as]=1;}return $this;}public function join($table,$on,$type=''){$this->arjoin[]=array($table,$on,strtoupper($type));return $this;}public function where($where,$leftwrap='AND',$rightwrap=''){if(!empty($where)&&is_array($where)){$this->arwhere[]=array($where,$leftwrap,$rightwrap,count($this->arwhere));}return $this;}public function groupby($key){$key=explode(',',$key);foreach($key as $k){$this->argroupby[]=$k;}return $this;}public function having($having,$leftwrap='AND',$rightwrap=''){$this->arhaving[]=array($having,$leftwrap,$rightwrap,count($this->arhaving));return $this;}public function orderby($key,$type='desc'){$this->arorderby[$key]=$type;return $this;}public function limit($offset,$count){$this->arlimit="$offset , $count";return $this;}public function insert($table,array $data){$this->_sqltype='insert';$this->arinsert=$data;$this->_lastinsertbatchcount=0;$this->from($table);return $this;}public function replace($table,array $data){$this->_sqltype='replace';$this->arinsert=$data;$this->from($table);return $this;}private function _compileinsert(){$keys=array();$values=array();foreach($this->arinsert as $key=>$value){$keys[]=$this->_protectidentifier($key);$values[]='?';$this->_values[]=$value;}if(!empty($keys)){return '('.implode(',',$keys).') '."\n".'VALUES ('.implode(',',$values).')';}return '';}public function insertbatch($table,array $data){$this->_sqltype='insertBatch';$this->arinsertbatch=$data;$this->_lastinsertbatchcount=count($data);$this->from($table);return $this;}public function replacebatch($table,array $data){$this->_sqltype='replaceBatch';$this->arinsertbatch=$data;$this->_lastinsertbatchcount=count($data);$this->from($table);return $this;}private function _compileinsertbatch(){$keys=array();$values=array();if(!empty($this->arinsertbatch[0])){foreach($this->arinsertbatch[0]as $key=>$value){$keys[]=$this->_protectidentifier($key);}foreach($this->arinsertbatch as $row){$_values=array();foreach($row as $key=>$value){$_values[]='?';$this->_values[]=$value;}$values[]='('.implode(',',$_values).')';}return '('.implode(',',$keys).') '."\n VALUES ".implode(' , ',$values);}return '';}public function delete($table,array $where=array()){$this->from($table);$this->where($where);$this->_sqltype='delete';return $this;}public function update($table,array $data=array(),array $where=array()){$this->from($table);$this->where($where);foreach($data as $key=>$value){if(is_bool($value)){$this->set($key,(($value===false)?0:1),true);}elseif(is_null($value)){$this->set($key,'NULL',false);}else{$this->set($key,$value,true);}}return $this;}public function updatebatch($table,array $values,$index){$this->from($table);$this->_sqltype='updateBatch';$this->arupdatebatch=array($values,$index);if(!empty($values[0])){foreach($values as $val){$ids[]=$val[$index];}$this->where(array($index=>$ids));}return $this;}private function _compileupdatebatch(){list($values,$index)=$this->arupdatebatch;if(count($values)&&isset($values[0][$index])){$ids=array();$final=array();foreach($values as $key=>$val){$ids[]=$val[$index];foreach(array_keys($val)as $field){if($field!=$index){$final[$field][]='WHEN '.$this->_protectidentifier($index).' = '.$val[$index].' THEN '."?";$this->_values[]=$val[$field];}}}$sql="";$cases='';foreach($final as $k=>$v){$cases.=$this->_protectidentifier($k).' = CASE '."\n";foreach($v as $row){$cases.=$row."\n";}$cases.='ELSE '.$this->_protectidentifier($k).' END, ';}$sql.=substr($cases,0,-2);return $sql;}return '';}public function set($key,$value,$wrap=true){$this->_sqltype='update';$this->arset[$key]=array($value,$wrap);return $this;}public function wrap($str){$_key=explode('.',$str);if(count($_key)==2){return $this->_protectidentifier($this->_checkprefix($_key[0])).'.'.$this->_protectidentifier($_key[1]);}else{return $this->_protectidentifier($_key[0]);}}public function getsql(){if($this->_currentsql){return $this->_currentsql;}switch($this->_sqltype){case 'select':$this->_currentsql=$this->_getselectsql();break;case 'update':$this->_currentsql=$this->_getupdatesql();break;case 'updateBatch':$this->_currentsql=$this->_getupdatebatchsql();break;case 'insert':$this->_currentsql=$this->_getinsertsql();break;case 'insertBatch':$this->_currentsql=$this->_getinsertbatchsql();break;case 'replace':$this->_currentsql=$this->_getreplacesql();break;case 'replaceBatch':$this->_currentsql=$this->_getreplacebatchsql();break;case 'delete':$this->_currentsql=$this->_getdeletesql();break;}return $this->_currentsql;}private function _getupdatesql(){$sql[]="\n".'UPDATE ';$sql[]=$this->_getfrom();$sql[]="\n".'SET';$sql[]=$this->_compileset();$sql[]=$this->_getwhere();$sql[]=$this->_getlimit();return implode(' ',$sql);}private function _getupdatebatchsql(){$sql[]="\n".'UPDATE ';$sql[]=$this->_getfrom();$sql[]="\n".'SET';$sql[]=$this->_compileupdatebatch();$sql[]=$this->_getwhere();return implode(' ',$sql);}private function _getinsertsql(){$sql[]="\n".'INSERT INTO ';$sql[]=$this->_getfrom();$sql[]=$this->_compileinsert();return implode(' ',$sql);}private function _getinsertbatchsql(){$sql[]="\n".'INSERT INTO ';$sql[]=$this->_getfrom();$sql[]=$this->_compileinsertbatch();return implode(' ',$sql);}private function _getreplacesql(){$sql[]="\n".'REPLACE INTO ';$sql[]=$this->_getfrom();$sql[]=$this->_compileinsert();return implode(' ',$sql);}private function _getreplacebatchsql(){$sql[]="\n".'REPLACE INTO ';$sql[]=$this->_getfrom();$sql[]=$this->_compileinsertbatch();return implode(' ',$sql);}private function _getdeletesql(){$sql[]="\n".'DELETE FROM ';$sql[]=$this->_getfrom();$sql[]=$this->_getwhere();return implode(' ',$sql);}private function _getselectsql(){$select=$this->_compileselect();$from=$this->_getfrom();$where=$this->_getwhere();$having='';foreach($this->arhaving as $w){$having.=call_user_func_array(array($this,'_compileWhere'),$w);}$having=trim($having);if($having){$having="\n".' HAVING '.$having;}$groupby=trim($this->_compilegroupby());if($groupby){$groupby="\n".' GROUP BY '.$groupby;}$orderby=trim($this->_compileorderby());if($orderby){$orderby="\n".' ORDER BY '.$orderby;}$limit=$this->_getlimit();$sql="\n".' SELECT '.$select."\n".' FROM '.$from.$where.$groupby.$having.$orderby.$limit;return $sql;}private function _compileset(){$set=array();foreach($this->arset as $key=>$value){list($value,$wrap)=$value;if($wrap){$set[]=$this->_protectidentifier($key).' = '.'?';$this->_values[]=$value;}else{$set[]=$this->_protectidentifier($key).' = '.$value;}}return implode(' , ',$set);}private function _compilegroupby(){$groupby=array();foreach($this->argroupby as $key){$_key=explode('.',$key);if(count($_key)==2){$groupby[]=$this->_protectidentifier($this->_checkprefix($_key[0])).'.'.$this->_protectidentifier($_key[1]);}else{$groupby[]=$this->_protectidentifier($_key[0]);}}return implode(' , ',$groupby);}private function _compileorderby(){$orderby=array();foreach($this->arorderby as $key=>$type){$type=strtoupper($type);$_key=explode('.',$key);if(count($_key)==2){$orderby[]=$this->_protectidentifier($this->_checkprefix($_key[0])).'.'.$this->_protectidentifier($_key[1]).' '.$type;}else{$orderby[]=$this->_protectidentifier($_key[0]).' '.$type;}}return implode(' , ',$orderby);}private function _compilewhere($where,$leftwrap='AND',$rightwrap='',$index=-1){$_where=array();if($index==0&&strtoupper(trim($leftwrap))=='AND'){$leftwrap='';}if(is_string($where)){return ' '.$leftwrap.' '.$where.$rightwrap.' ';}foreach($where as $key=>$value){$key=trim($key);$_key=explode(' ',$key,2);$op=count($_key)==2?$_key[1]:'';$key=explode('.',$_key[0]);if(count($key)==2){$key=$this->_protectidentifier($this->_checkprefix($key[0])).'.'.$this->_protectidentifier($key[1]);}else{$key=$this->_protectidentifier(current($key));}if(is_array($value)){$op=$op?$op.' IN ':' IN ';$op=strtoupper($op);$_where[]=$key.' '.$op.'('.implode(',',array_fill(0,count($value),'?')).')';foreach($value as $v){array_push($this->_values,$v);}}elseif(is_bool($value)){$op=$op?$op:'=';$op=strtoupper($op);$value=$value?1:0;$_where[]=$key.' '.$op.' ? ';array_push($this->_values,$value);}elseif(is_null($value)){$op=$op?$op:'IS';$op=strtoupper($op);$_where[]=$key.' '.$op.' NULL ';array_push($this->_values,$value);}else{$op=$op?$op:'=';$op=strtoupper($op);$_where[]=$key.' '.$op.' ? ';array_push($this->_values,$value);}}return ' '.$leftwrap.' '.implode(' AND ',$_where).$rightwrap.' ';}private function _compileselect(){$selects=$this->arselect;if(empty($selects)){$selects[]='*';}foreach($selects as $key=>$value){$value=trim($value);if($value!='*'){$_info=explode('.',$value);if(count($_info)==2){$_info[0]=$this->_protectidentifier($this->_checkprefix($_info[0]));$_info[1]=$this->_protectidentifier($_info[1]);$value=implode('.',$_info);}else{$value=$this->_protectidentifier($value);}}$selects[$key]=$value;}return implode(',',$selects);}private function _compilefrom($from,$as=''){if($as){$this->_astable[$as]=1;$as=' AS '.$this->_protectidentifier($as).' ';}return $this->_protectidentifier($this->_checkprefix($from)).$as;}private function _compilejoin($table,$on,$type=''){if(is_array($table)){$this->_astable[current($table)]=1;$table=$this->_protectidentifier($this->_checkprefix(key($table))).' AS '.$this->_protectidentifier(current($table)).' ';}else{$table=$this->_protectidentifier($this->_checkprefix($table));}list($left,$right)=explode('=',$on);$_left=explode('.',$left);$_right=explode('.',$right);if(count($_left)==2){$_left[0]=$this->_protectidentifier($this->_checkprefix($_left[0]));$_left[1]=$this->_protectidentifier($_left[1]);$left=' '.implode('.',$_left).' ';}else{$left=$this->_protectidentifier($left);}if(count($_right)==2){$_right[0]=$this->_protectidentifier($this->_checkprefix($_right[0]));$_right[1]=$this->_protectidentifier($_right[1]);$right=' '.implode('.',$_right).' ';}else{$right=$this->_protectidentifier($right);}$on=$left.' = '.$right;return ' '.$type.' JOIN '.$table.' ON '.$on.' ';}private function _checkprefix($str){$prefix=$this->gettableprefix();if($prefix&&strpos($str,$prefix)===false){if(!isset($this->_astable[$str])){return $prefix.$str;}}return $str;}private function _protectidentifier($str){if(stripos($str,'(')){return $str;}$_str=explode(' ',$str);if(count($_str)==3&&strtolower($_str[1])=='as'){return"`{$_str[0]}` AS `{$_str[2]}`";}else{return"`$str`";}}private function _getfrom(){$table=' '.call_user_func_array(array($this,'_compileFrom'),$this->arfrom).' ';foreach($this->arjoin as $join){$table.=call_user_func_array(array($this,'_compileJoin'),$join);}return $table;}private function _getwhere(){$where='';$hasemptyin=false;foreach($this->arwhere as $w){foreach($w[0]as $value){if(is_array($value)&&empty($value)){$hasemptyin=true;break;}}if($hasemptyin){break;}$where.=call_user_func_array(array($this,'_compileWhere'),$w);}if($hasemptyin){return '0';}$where=trim($where);if($where){$where="\n".' WHERE '.$where;}return $where;}private function _getlimit(){$limit=$this->arlimit;if($limit){$limit="\n".' LIMIT '.$limit;}return $limit;}public function __tostring(){return $this->getsql();}}class soter_database_resultset{private $_resultset=array(),$_rowskey='';public function __construct($resultset){$this->_resultset=$resultset;}public function total(){return count($this->_resultset);}public function rows($isassoc=true){$key=$this->_rowskey;$this->_rowskey='';if($key){if($isassoc){$rows=array();foreach($this->_resultset as $row){$rows[$row[$key]]=$row;}return $rows;}else{$rows=array();foreach($this->_resultset as $row){$rows[$row[$key]]=array_values($row);}return $rows;}}else{if($isassoc){return $this->_resultset;}else{$rows=array();foreach($this->_resultset as $row){$rows[]=array_values($row);}return $rows;}}}public function row($index=null,$isassoc=true){if(!is_null($index)&&isset($this->_resultset[$index])){return $isassoc?$this->_resultset[$index]:array_values($this->_resultset[$index]);}else{$row=current($this->_resultset);return $isassoc?(is_array($row)?$row:array()):array_values($row);}}public function object($beanclassname,$index=null){$beandirname=sr::config()->getbeandirname();if(stripos($beanclassname,$beandirname.'_')===false){$beanclassname=$beandirname.'_'.$beanclassname;}$object=new $beanclassname();if(!($object instanceof soter_bean)){throw new soter_exception_500('error class [ '.$beanclassname.' ] , need instanceof Soter_Bean');}$row=$this->row($index);foreach($row as $key=>$value){$method="set".ucfirst($key)."";$object->{$method}($value);}return $object;}public function objects($beanclassname){$beandirname=sr::config()->getbeandirname();if(stripos($beanclassname,$beandirname.'_')===false){$beanclassname=$beandirname.'_'.$beanclassname;}$object=new $beanclassname();if(!($object instanceof soter_bean)){throw new soter_exception_500('error class [ '.$beanclassname.' ] , need instanceof Soter_Bean');}$objects=array();$rows=$this->rows();foreach($rows as $row){$object=new $beanclassname();foreach($row as $key=>$value){$method="set".ucfirst($key);$object->{$method}($value);}$objects[]=$object;}return $objects;}public function values($columnname){$columns=array();foreach($this->_resultset as $row){if(isset($row[$columnname])){$columns[]=$row[$columnname];}else{return array();}}return $columns;}public function value($columnname,$default=null,$index=null){$row=$this->row($index);return($columnname&&isset($row[$columnname]))?$row[$columnname]:$default;}public function key($columnname){$this->_rowskey=$columnname;return $this;}}interface soter_logger_writer{public function write(soter_exception $exception);}interface soter_request{public function getpathinfo();public function getquerystring();}interface soter_uri_rewriter{public function rewrite($uri);}interface soter_exception_handle{public function handle(soter_exception $exception);}interface soter_maintain_handle{public function handle();}interface soter_database_slowquery_handle{public function handle($sql,$explainstring,$time);}interface soter_database_index_handle{public function handle($sql,$explainstring,$time);}interface soter_cache{public function set($key,$value,$cachetime);public function get($key);public function delete($key);public function clean();}abstract class soter_controller{}abstract class soter_model{}abstract class soter_dao{private $db;public function __construct(){$this->db=sr::db();}public function setdb(soter_database_activerecord $db){$this->db=$db;return $this;}public function&getdb(){return $this->db;}public abstract function gettable();public abstract function getprimarykey();public abstract function getcolumns();public function insert($data){return $this->getdb()->insert($this->gettable(),$data)->execute();}public function update($data,$where){$where=is_array($where)?$where:array($this->getprimarykey()=>$where);return $this->getdb()->where($where)->update($this->gettable(),$data)->execute();}public function find($values,$isrows=false,array $orderby=array()){if(empty($values)){return 0;}if(is_array($values)){$is_asso=array_diff_assoc(array_keys($values),range(0,sizeof($values)))?true:false;if($is_asso){$this->getdb()->where($values);}else{$this->getdb()->where(array($this->getprimarykey()=>array_values($values)));}}else{$this->getdb()->where(array($this->getprimarykey()=>$values));}foreach($orderby as $k=>$v){$this->getdb()->orderby($k,$v);}if(!$isrows){$this->getdb()->limit(0,1);}$rs=$this->getdb()->from($this->gettable())->execute();if($isrows){return $rs->rows();}else{return $rs->row();}}public function findall($where=null,array $orderby=array(),$limit=null,$fileds=null){if(!is_null($fileds)){$this->getdb()->select($fileds);}if(!is_null($where)){$this->getdb()->where($where);}foreach($orderby as $k=>$v){$this->getdb()->orderby($k,$v);}if(!is_null($limit)){$this->getdb()->limit(0,$limit);}return $this->getdb()->from($this->gettable())->execute()->rows();}public function findcol($col,$where,$isrows=false,array $orderby=array()){$row=$this->find($where,$isrows,$orderby);if(!$isrows){return isset($row[$col])?$row[$col]:null;}else{$vals=array();foreach($row as $v){$vals[]=$v[$col];}return $vals;}}public function delete($values,array $cond=null){if(empty($values)){return 0;}if(!empty($values)){$this->getdb()->where(array($this->getprimarykey()=>is_array($values)?array_values($values):$values));}if(!empty($cond)){$this->getdb()->where($cond);}return $this->getdb()->delete($this->gettable())->execute();}public function getpage($page,$pagesize,$url,$fields='*',array $where=null,array $orderby=array(),$pagebarorder=array(1,2,3,4,5,6),$pagebaracount=10){$data=array();if(is_array($where)){$this->getdb()->where($where);}$total=$this->getdb()->select('count(*) as total')->from($this->gettable())->execute()->value('total');if(is_array($where)){$this->getdb()->where($where);}foreach($orderby as $k=>$v){$this->getdb()->orderby($k,$v);}$data['items']=$this->getdb()->select($fields)->limit(($page-1)*$pagesize,$pagesize)->from($this->gettable())->execute()->rows();$data['page']=sr::page($total,$page,$pagesize,$url,$pagebarorder,$pagebaracount);return $data;}public function search($page,$pagesize,$url,$fields,$cond,array $values=array(),$pagebarorder=array(1,2,3,4,5,6),$pagebaracount=10){$data=array();$table=$this->getdb()->gettableprefix().$this->gettable();$total=$this->getdb()->execute('select count(*) as total from '.$table.(strpos(trim($cond),'order')===0?' ':' where ').$cond,$values)->value('total');$data['items']=$this->getdb()->execute('select '.$fields.' from '.$table.(strpos(trim($cond),'order')===0?' ':' where ').$cond.' limit '.(($page-1)*$pagesize).','.$pagesize,$values)->rows();$data['page']=sr::page($total,$page,$pagesize,$url,$pagebarorder,$pagebaracount);return $data;}}abstract class soter_business{}abstract class soter_bean{}abstract class soter_task{abstract function execute(soter_cliargs $args);}abstract class soter_router{protected $route;public function __construct(){$this->route=new soter_route();}public abstract function find();public function&route(){return $this->route;}}abstract class soter_exception extends exception{protected $errormessage,$errorcode,$errorfile,$errorline,$errortype,$trace,$httpstatusline='HTTP/1.0 500 Internal Server Error',$exceptionname='Soter_Exception';public function __construct($errormessage='',$errorcode=0,$errortype='Exception',$errorfile='',$errorline='0'){parent::__construct($errormessage,$errorcode);$this->errormessage=$errormessage;$this->errorcode=$errorcode;$this->errortype=$errortype;$this->errorfile=sr::realpath($errorfile);$this->errorline=$errorline;$this->trace=debug_backtrace(false);}public function errortype2string($errortype){$value=$errortype;$levelnames=array(e_error=>'ERROR',e_warning=>'WARNING',e_parse=>'PARSE',e_notice=>'NOTICE',e_core_error=>'CORE_ERROR',e_core_warning=>'CORE_WARNING',e_compile_error=>'COMPILE_ERROR',e_compile_warning=>'COMPILE_WARNING',e_user_error=>'USER_ERROR',e_user_warning=>'USER_WARNING',e_user_notice=>'USER_NOTICE');if(defined('E_STRICT')){$levelnames[e_strict]='STRICT';}if(defined('E_DEPRECATED')){$levelnames[e_deprecated]='DEPRECATED';}if(defined('E_USER_DEPRECATED')){$levelnames[e_user_deprecated]='USER_DEPRECATED';}if(defined('E_RECOVERABLE_ERROR')){$levelnames[e_recoverable_error]='RECOVERABLE_ERROR';}$levels=array();if(($value&e_all)==e_all){$levels[]='E_ALL';$value&=~e_all;}foreach($levelnames as $level=>$name){if(($value&$level)==$level){$levels[]=$name;}}if(empty($levelnames[$this->errorcode])){return $this->errortype?$this->errortype:'General Error';}return implode(' | ',$levels);}public function geterrormessage(){return $this->errormessage;}public function geterrorcode(){return $this->errorcode;}public function geterrorfile($safepath=false){return $safepath?sr::safepath($this->errorfile):$this->errorfile;}public function geterrorline(){return $this->errorline;}public function geterrortype(){return $this->errortype2string($this->errorcode);}public function render($isjson=false,$return=false){if($isjson){$string=$this->renderjson();}elseif(sr::iscli()){$string=$this->rendercli();}else{$string=str_replace('</body>',$this->gettracestring(false).'</body>',$this->renderhtml());}if($return){return $string;}else{echo $string;}}public function gettraceclistring(){return $this->gettracestring(true);}public function gettracehtmlstring(){return $this->gettracestring(false);}private function gettracestring($iscli){$trace=$this->trace;array_shift($trace);$trace=array_reverse($trace);$str=$iscli?"[ Debug Backtrace ]\n":'<div style="padding:10px;">[ Debug Backtrace ]<br/>';foreach($trace as $e){array_shift($trace);if(sr::arrayget($e,'function')=='call_user_func_array'){break;}}if(empty($trace)){return '';}foreach($trace as $e){if(!empty($e['class'])&&stripos($e['class'],'Soter_')===0){break;}$file=sr::safepath(sr::arrayget($e,'file'));$line=sr::arrayget($e,'line');$func=(!empty($e['class'])?"{$e['class']}{$e['type']}{$e['function']}()":"{$e['function']}()");$str.="&rarr; {$func} ".($line?"[ line:{$line} {$file} ]":'').($iscli?"\n":'<br/>');}$str.=$iscli?"\n":'</div>';return $str;}public function rendercli(){return"$this->exceptionname [ ".$this->geterrortype()." ]\n"."Line: ".$this->geterrorline().". ".$this->geterrorfile()."\n"."Message: ".$this->geterrormessage()."\n"."Time: ".date('Y/m/d H:i:s T')."\n";}public function renderhtml(){return '<body style="padding:0;margin:0;background:black;color:whitesmoke;">'.'<div style="padding:10px;background:red;font-size:18px;">'.$this->exceptionname.' [ '.$this->geterrortype().' ] </div>'.'<div style="padding:10px;background:black;font-size:14px;color:yellow;line-height:1.5em;">'.'<font color="whitesmoke">Line: </font>'.$this->geterrorline().' [ '.$this->geterrorfile(true).' ]<br/>'.'<font color="whitesmoke">Message: </font>'.htmlspecialchars($this->geterrormessage()).'</br>'.'<font color="whitesmoke">Time: </font>'.date('Y/m/d H:i:s T').'</div>'.'</body>';}public function renderjson(){$render=soter::getconfig()->getexceptionjsonrender();if(is_callable($render)){return $render($this);}return '';}public function sethttpheader(){header($this->httpstatusline);return $this;}public function __tostring(){return $this->render(false,true);}}abstract class soter_session{protected $config;public function __construct($configfilename){if(is_array($configfilename)){$this->config=$configfilename;}else{$this->config=sr::config($configfilename);}}public abstract function init();}class soter_exception_404 extends soter_exception{protected $exceptionname='Soter_Exception_404',$httpstatusline='HTTP/1.0 404 Not Found';}class soter_exception_500 extends soter_exception{protected $exceptionname='Soter_Exception_500',$httpstatusline='HTTP/1.0 500 Internal Server Error';}class soter_exception_database extends soter_exception{protected $exceptionname='Soter_Exception_Database',$httpstatusline='HTTP/1.0 500 Internal Server Error';}class soter_request_default implements soter_request{private $pathinfo,$querystring;public function __construct(){$this->pathinfo=sr::arrayget($_server,'PATH_INFO',sr::arrayget($_server,'REDIRECT_PATH_INFO'));$this->querystring=sr::arrayget($_server,'QUERY_STRING','');}public function getpathinfo(){return $this->pathinfo;}public function getquerystring(){return $this->querystring;}public function setpathinfo($pathinfo){$this->pathinfo=$pathinfo;return $this;}public function setquerystring($querystring){$this->querystring=$querystring;return $this;}}class soter_view{private static $vars=array();public function add($key,$value=array()){if(is_array($key)){foreach($key as $k=>$v){if(!isset(self::$vars[$k])){self::$vars[$k]=$v;}}}else{if(!isset(self::$vars[$key])){self::$vars[$key]=$value;}}return $this;}public function set($key,$value=array()){if(is_array($key)){foreach($key as $k=>$v){self::$vars[$k]=$v;}}else{self::$vars[$key]=$value;}return $this;}private function _load($path,$data=array(),$return=false){if(!file_exists($path)){throw new soter_exception_500('view file : [ '.$path.' ] not found');}$data=array_merge(self::$vars,$data);if(!empty($data)){extract($data);}if($return){@ob_start();include $path;$html=ob_get_contents();@ob_end_clean();return $html;}else{include $path;return;}}public function load($viewname,$data=array(),$return=false){$config=sr::config();$path=$config->getapplicationdir().$config->getviewsdirname().'/'.$viewname.'.php';$hmvcmodules=$config->gethmvcmodules();$hmvcdirname=sr::arrayget($hmvcmodules,$config->getroute()->gethmvcmodulename(),'');if($hmvcdirname){$trace=debug_backtrace();$calledfilepath=array_shift($trace);$calledfilepath=sr::realpath(sr::arrayget($calledfilepath,'file'));$hmvcpath=$config->getprimaryapplicationdir().$config->gethmvcdirname().'/'.$hmvcdirname;$calledisinhmvc=$calledfilepath&&$hmvcdirname&&(strpos($calledfilepath,$hmvcpath)===0);if(!$calledisinhmvc){$path=$config->getprimaryapplicationdir().$config->getviewsdirname().'/'.$viewname.'.php';}}return $this->_load($path,$data,$return);}public function loadparent($viewname,$data=array(),$return=false){$config=sr::config();$path=$config->getprimaryapplicationdir().$config->getviewsdirname().'/'.$viewname.'.php';return $this->_load($path,$data,$return);}}class soter_cliargs{private $args;public function __construct(){$this->args=sr::getopt();}public function get($key=null,$default=null){if(empty($key)){return $this->args;}return sr::arrayget($this->args,$key,$default);}}class soter_route{private $found=false;private $controller,$method,$args,$hmvcmodulename;public function gethmvcmodulename(){return $this->hmvcmodulename;}public function sethmvcmodulename($hmvcmodulename){$this->hmvcmodulename=$hmvcmodulename;return $this;}public function found(){return $this->found;}public function setfound($found){$this->found=$found;return $this;}public function getcontroller(){return $this->controller;}public function getmethod(){return $this->method;}public function getcontrollershort(){return preg_replace('/^'.sr::config()->getcontrollerdirname().'_/','',$this->getcontroller());}public function getmethodshort(){return preg_replace('/^'.sr::config()->getmethodprefix().'/','',$this->getmethod());}public function getargs(){return $this->args;}public function __construct(){$this->args=array();}public function setcontroller($controller){$this->controller=$controller;return $this;}public function setmethod($method){$this->method=$method;return $this;}public function setargs(array $args){$this->args=$args;return $this;}}class soter_router_get_default extends soter_router{public function find(){$config=sr::config();$query=$config->getrequest()->getquerystring();parse_str($query,$get);$controllername=sr::arrayget($get,$config->getrouterurlcontrollerkey(),'');$methodname=sr::arrayget($get,$config->getrouterurlmethodkey(),'');$hmvcmodulename=sr::arrayget($get,$config->getrouterurlmodulekey(),'');$hmvcmoduledirname=soter::checkhmvc($hmvcmodulename,false);if($controllername){$controllername=$config->getcontrollerdirname().'_'.$controllername;}if($methodname){$methodname=$config->getmethodprefix().$methodname;}return $this->route->sethmvcmodulename($hmvcmoduledirname?$hmvcmodulename:'')->setcontroller($controllername)->setmethod($methodname)->setfound($hmvcmoduledirname||$controllername);}}class soter_router_pathinfo_default extends soter_router{public function find(){$config=soter::getconfig();$uri=$config->getrequest()->getpathinfo();if(empty($uri)){return $this->route->setfound(false);}else{if($urirewriter=$config->geturirewriter()){$uri=$urirewriter->rewrite($uri);}}$uri=trim($uri,'/');$_info=explode('/',$uri);$hmvcmodule=current($_info);if($hmvcmoduledirname=soter::checkhmvc($hmvcmodule,false)){$uri=ltrim(substr($uri,strlen($hmvcmodule)),'/');}$controller=$config->getdefaultcontroller();$method=$config->getdefaultmethod();$subfix=$config->getmethodurisubfix();if($uri){$methodpatharr=explode($subfix,$uri);if(sr::strendswith($uri,$subfix)){if(stripos($methodpatharr[0],'/')!==false){$controller=str_replace('/','_',dirname($uri));$method=basename($methodpatharr[0]);}else{$method=basename($methodpatharr[0]);}}else{$controller=str_replace('/','_',$uri);}}$controller=$config->getcontrollerdirname().'_'.$controller;$methodandparameters=explode($config->getmethodparametersdelimiter(),$method);$method=$config->getmethodprefix().current($methodandparameters);array_shift($methodandparameters);$parameters=$methodandparameters;return $this->route->sethmvcmodulename($hmvcmoduledirname?$hmvcmodule:'')->setcontroller($controller)->setmethod($method)->setargs($parameters)->setfound(true);}}class soter_config{private $applicationdir='',$primaryapplicationdir='',$indexdir='',$indexname='',$classesdirname='classes',$hmvcdirname='hmvc',$librarydirname='library',$functionsdirname='functions',$viewsdirname='views',$configdirname='config',$configtestingdirname='testing',$configproductiondirname='production',$configdevelopmentdirname='development',$controllerdirname='Controller',$businessdirname='Business',$daodirname='Dao',$beandirname='Bean',$modeldirname='Model',$taskdirname='Task',$defaultcontroller='Welcome',$defaultmethod='index',$methodprefix='do_',$methodurisubfix='.do',$routerurlmodulekey='m',$routerurlcontrollerkey='c',$routerurlmethodkey='a',$methodparametersdelimiter='-',$logssubdirnameformat='Y-m-d/H',$cookieprefix='',$backendserveripwhitelist='',$isrewrite=false,$request,$showerror=true,$routerscontainer=array(),$packagemastercontainer=array(),$packagecontainer=array(),$loggerwritercontainer=array(),$urirewriter,$exceptionhandle,$route,$environment=sr::env_development,$serverenvironmenttestingvalue='testing',$serverenvironmentdevelopmentvalue='development',$serverenvironmentproductionvalue='production',$hmvcmodules=array(),$ismaintainmode=false,$maintainipwhitelist=array(),$maintainmodehandle,$databseconfig,$cachehandle,$sessionconfig,$sessionhandle,$methodcacheconfig,$datacheckrules,$outputjsonrender,$exceptionjsonrender;public function getexceptionjsonrender(){return $this->exceptionjsonrender;}public function setexceptionjsonrender($exceptionjsonrender){$this->exceptionjsonrender=$exceptionjsonrender;return $this;}public function getoutputjsonrender(){return $this->outputjsonrender;}public function setoutputjsonrender($outputjsonhandle){$this->outputjsonrender=$outputjsonhandle;return $this;}public function getdatacheckrules(){return $this->datacheckrules;}public function setdatacheckrules($datacheckrules){$this->datacheckrules=is_array($datacheckrules)?$datacheckrules:sr::config($datacheckrules);return $this;}public function getmethodcacheconfig(){return $this->methodcacheconfig;}public function setmethodcacheconfig($methodcacheconfig){$this->methodcacheconfig=is_array($methodcacheconfig)?$methodcacheconfig:sr::config($methodcacheconfig);return $this;}public function getviewsdirname(){return $this->viewsdirname;}public function setviewsdirname($viewsdirname){$this->viewsdirname=$viewsdirname;return $this;}public function getcachehandle(){return $this->cachehandle;}public function setcachehandle($cachehandle){if($cachehandle instanceof soter_cache){$this->cachehandle=$cachehandle;}else{$this->cachehandle=sr::config($cachehandle);}return $this;}public function getsessionhandle(){return $this->sessionhandle;}public function setsessionhandle($sessionhandle){if($sessionhandle instanceof soter_session){$this->sessionhandle=$sessionhandle;}else{$this->sessionhandle=sr::config($sessionhandle);}return $this;}public function getsessionconfig(){if(empty($this->sessionconfig)){$this->sessionconfig=array('autostart'=>false,'cookie_path'=>'/','cookie_domain'=>sr::server('HTTP_HOST'),'session_name'=>'SOTER','lifetime'=>3600,);}return $this->sessionconfig;}public function setsessionconfig($sessionconfig){if(is_array($sessionconfig)){$this->sessionconfig=$sessionconfig;}else{$this->sessionconfig=sr::config($sessionconfig);}return $this;}public function getdatabseconfig($group=null){if(empty($group)){return $this->databseconfig;}else{return isset($this->databseconfig[$group])?$this->databseconfig[$group]:array();}}public function setdatabseconfig($databseconfig){$this->databseconfig=is_array($databseconfig)?$databseconfig:sr::config($databseconfig);return $this;}public function getismaintainmode(){return $this->ismaintainmode;}public function getmaintainmodehandle(){return $this->maintainmodehandle;}public function setismaintainmode($ismaintainmode){$this->ismaintainmode=$ismaintainmode;return $this;}public function setmaintainmodehandle(soter_maintain_handle $maintainmodehandle){$this->maintainmodehandle=$maintainmodehandle;return $this;}public function getmaintainipwhitelist(){return $this->maintainipwhitelist;}public function setmaintainipwhitelist($maintainipwhitelist){$this->maintainipwhitelist=$maintainipwhitelist;return $this;}public function getmethodparametersdelimiter(){return $this->methodparametersdelimiter;}public function setmethodparametersdelimiter($methodparametersdelimiter){$this->methodparametersdelimiter=$methodparametersdelimiter;return $this;}public function getrouterurlmodulekey(){return $this->routerurlmodulekey;}public function getrouterurlcontrollerkey(){return $this->routerurlcontrollerkey;}public function getrouterurlmethodkey(){return $this->routerurlmethodkey;}public function setrouterurlmodulekey($routerurlmodulekey){$this->routerurlmodulekey=$routerurlmodulekey;return $this;}public function setrouterurlcontrollerkey($routerurlcontrollerkey){$this->routerurlcontrollerkey=$routerurlcontrollerkey;return $this;}public function setrouterurlmethodkey($routerurlmethodkey){$this->routerurlmethodkey=$routerurlmethodkey;return $this;}public function geturirewriter(){return $this->urirewriter;}public function seturirewriter(soter_uri_rewriter $urirewriter){$this->urirewriter=$urirewriter;return $this;}public function getprimaryapplicationdir(){return $this->primaryapplicationdir;}public function setprimaryapplicationdir($primaryapplicationdir){$this->primaryapplicationdir=sr::realpath($primaryapplicationdir).'/';return $this;}public function getbackendserveripwhitelist(){return $this->backendserveripwhitelist;}public function setbackendserveripwhitelist(array $backendserveripwhitelist){$this->backendserveripwhitelist=$backendserveripwhitelist;return $this;}public function getcookieprefix(){return $this->cookieprefix;}public function setcookieprefix($cookieprefix){$this->cookieprefix=$cookieprefix;return $this;}public function getlogssubdirnameformat(){return $this->logssubdirnameformat;}public function setlogssubdirnameformat($logssubdirnameformat){$this->logssubdirnameformat=$logssubdirnameformat;return $this;}public function addautoloadfunctions(array $funciontsfilenamearray){foreach($funciontsfilenamearray as $functionsfilename){sr::functions($functionsfilename);}return $this;}public function getfunctionsdirname(){return $this->functionsdirname;}public function setfunctionsdirname($functionsdirname){$this->functionsdirname=$functionsdirname;return $this;}public function getmodeldirname(){return $this->modeldirname;}public function setmodeldirname($modeldirname){$this->modeldirname=$modeldirname;return $this;}public function getbeandirname(){return $this->beandirname;}public function setbeandirname($beandirname){$this->beandirname=$beandirname;return $this;}public function getbusinessdirname(){return $this->businessdirname;}public function getdaodirname(){return $this->daodirname;}public function gettaskdirname(){return $this->taskdirname;}public function setbusinessdirname($businessdirname){$this->businessdirname=$businessdirname;return $this;}public function setdaodirname($daodirname){$this->daodirname=$daodirname;return $this;}public function settaskdirname($taskdirname){$this->taskdirname=$taskdirname;return $this;}public function getserverenvironment($environment){switch(strtoupper($environment)){case strtoupper($this->getserverenvironmentdevelopmentvalue()):return sr::env_development;case strtoupper($this->getserverenvironmentproductionvalue()):return sr::env_production;case strtoupper($this->getserverenvironmenttestingvalue()):return sr::env_testing;default:throw new soter_exception_500('wrong parameter value['.$environment.'] of getServerEnvironment(), '.'should be one of ['.$this->getserverenvironmentdevelopmentvalue().','.$this->getserverenvironmenttestingvalue().','.$this->getserverenvironmentproductionvalue().']');}}public function getserverenvironmenttestingvalue(){return $this->serverenvironmenttestingvalue;}public function getserverenvironmentproductionvalue(){return $this->serverenvironmentproductionvalue;}public function getserverenvironmentdevelopmentvalue(){return $this->serverenvironmentdevelopmentvalue;}public function setserverenvironmentdevelopmentvalue($serverenvironmentdevelopmentvalue){$this->serverenvironmentdevelopmentvalue=$serverenvironmentdevelopmentvalue;return $this;}public function setserverenvironmenttestingvalue($serverenvironmenttestingvalue){$this->serverenvironmenttestingvalue=$serverenvironmenttestingvalue;return $this;}public function setserverenvironmentproductionvalue($serverenvironmentproductionvalue){$this->serverenvironmentproductionvalue=$serverenvironmentproductionvalue;return $this;}public function getconfigcurrentdirname(){$name=$this->getconfigdevelopmentdirname();switch($this->environment){case sr::env_development:$name=$this->getconfigdevelopmentdirname();break;case sr::env_testing:$name=$this->getconfigtestingdirname();break;case sr::env_production:$name=$this->getconfigproductiondirname();break;}return $name;}public function getenvironment(){return $this->environment;}public function setenvironment($environment){if(!in_array($environment,array(sr::env_development,sr::env_production,sr::env_testing))){throw new soter_exception_500('wrong parameter value['.$environment.'] of setEnvironment(), should be one of [Sr::ENV_DEVELOPMENT,Sr::ENV_PRODUCTION,Sr::ENV_TESTING]');}$this->environment=$environment;return $this;}public function getconfigdirname(){return $this->configdirname;}public function getconfigtestingdirname(){return $this->configtestingdirname;}public function getconfigproductiondirname(){return $this->configproductiondirname;}public function getconfigdevelopmentdirname(){return $this->configdevelopmentdirname;}public function setconfigdirname($configdirname){$this->configdirname=$configdirname;return $this;}public function setconfigtestingdirname($configtestingdirname){$this->configtestingdirname=$configtestingdirname;return $this;}public function setconfigproductiondirname($configproductiondirname){$this->configproductiondirname=$configproductiondirname;return $this;}public function setconfigdevelopmentdirname($configdevelopmentdirname){$this->configdevelopmentdirname=$configdevelopmentdirname;return $this;}public function getroute(){return empty($this->route)?new soter_route():$this->route;}public function setroute($route){$this->route=$route;return $this;}public function getlibrarydirname(){return $this->librarydirname;}public function setlibrarydirname($librarydirname){$this->librarydirname=$librarydirname;return $this;}public function gethmvcdirname(){return $this->hmvcdirname;}public function sethmvcdirname($hmvcdirname){$this->hmvcdirname=$hmvcdirname;return $this;}public function gethmvcmodules(){return $this->hmvcmodules;}public function sethmvcmodules($hmvcmodules){$this->hmvcmodules=$hmvcmodules;return $this;}public function getcontrollerdirname(){return $this->controllerdirname;}public function setcontrollerdirname($controllerdirname){$this->controllerdirname=$controllerdirname;return $this;}public function getexceptionhandle(){return $this->exceptionhandle;}public function setexceptionhandle($exceptionhandle){$this->exceptionhandle=$exceptionhandle;return $this;}public function getapplicationdir(){return $this->applicationdir;}public function getindexdir(){return $this->indexdir;}public function getindexname(){return $this->indexname;}public function getloggerwritercontainer(){return $this->loggerwritercontainer;}public function setapplicationdir($applicationdir){$this->applicationdir=sr::realpath($applicationdir).'/';if(empty($this->primaryapplicationdir)){$this->primaryapplicationdir=$this->applicationdir;}return $this;}public function setindexdir($indexdir){$this->indexdir=sr::realpath($indexdir).'/';return $this;}public function setindexname($indexname){$this->indexname=$indexname;return $this;}public function setloggerwritercontainer(soter_logger_writer $loggerwritercontainer){$this->loggerwritercontainer=$loggerwritercontainer;return $this;}public function getmethodprefix(){return $this->methodprefix;}public function getmethodurisubfix(){return $this->methodurisubfix;}public function setmethodprefix($methodprefix){$this->methodprefix=$methodprefix;return $this;}public function setmethodurisubfix($methodurisubfix){if(!$methodurisubfix){throw new soter_exception_500('"Method Uri Subfix" can not be empty.');}$this->methodurisubfix=$methodurisubfix;return $this;}public function getdefaultcontroller(){return $this->defaultcontroller;}public function getdefaultmethod(){return $this->defaultmethod;}public function setdefaultcontroller($defaultcontroller){$this->defaultcontroller=$defaultcontroller;return $this;}public function setdefaultmethod($defaultmethod){$this->defaultmethod=$defaultmethod;return $this;}public function getclassesdirname(){return $this->classesdirname;}public function setclassesdirname($classesdirname){$this->classesdirname=$classesdirname;return $this;}public function getpackages(){return array_merge($this->packagemastercontainer,$this->packagecontainer);}public function addmasterpackages(array $packagespath){foreach($packagespath as $packagepath){$this->addmasterpackage($packagepath);}return $this;}public function addmasterpackage($packagepath){$packagepath=sr::realpath($packagepath).'/';if(!in_array($packagepath,$this->packagemastercontainer)){array_push($this->packagemastercontainer,$packagepath);if(file_exists($library=$packagepath.$this->getlibrarydirname().'/')){array_push($this->packagemastercontainer,$library);}}return $this;}public function addpackages(array $packagespath){foreach($packagespath as $packagepath){$this->addpackage($packagepath);}return $this;}public function addpackage($packagepath){$packagepath=sr::realpath($packagepath).'/';if(!in_array($packagepath,$this->packagecontainer)){array_push($this->packagecontainer,$packagepath);if(file_exists($library=$packagepath.$this->getlibrarydirname().'/')){array_push($this->packagecontainer,$library);}}return $this;}public function bootstrap(){if(file_exists($bootstrap=$this->getapplicationdir().'bootstrap.php')){sr::includeonce($bootstrap);}}public function getshowerror(){return $this->showerror;}public function getrouterscontainer(){return $this->routerscontainer;}public function setshowerror($showerror){$this->showerror=$showerror;return $this;}public function getrequest(){return $this->request;}public function setrequest(soter_request $request){$this->request=$request;return $this;}public function addrouter(soter_router $router){array_unshift($this->routerscontainer,$router);return $this;}public function getrouters(){return $this->routerscontainer;}public function addloggerwriter(soter_logger_writer $loggerwriter){$this->loggerwritercontainer[]=$loggerwriter;return $this;}public function getloggerwriters(){return $this->loggerwritercontainer;}public function getisrewrite(){return $this->isrewrite;}public function settimezone($timezone){date_default_timezone_set($timezone);return $this;}public function setisrewrite($isrewrite){$this->isrewrite=$isrewrite;return $this;}}class soter_logger_writer_dispatcher{private static $instance;public static function initialize(){if(empty(self::$instance)){self::$instance=new self();error_reporting(e_all);sr::ispluginmode()?ini_set('display_errors',true):ini_set('display_errors',false);set_exception_handler(array(self::$instance,'handleException'));set_error_handler(array(self::$instance,'handleError'));register_shutdown_function(array(self::$instance,'handleFatal'));}}final public function handleexception(exception $exception){if(is_subclass_of($exception,'Soter_Exception')){$this->dispatch($exception);}else{$this->dispatch(new soter_exception_500($exception->getmessage(),$exception->getcode(),get_class($exception),$exception->getfile(),$exception->getline()));}}final public function handleerror($code,$message,$file,$line){if(0==error_reporting()){return;}$this->dispatch(new soter_exception_500($message,$code,'General Error',$file,$line));}final public function handlefatal(){if(0==error_reporting()){return;}$lasterror=error_get_last();$fatalerror=array(1,256,64,16,4,4096);if(!isset($lasterror["type"])||!in_array($lasterror["type"],$fatalerror)){return;}$this->dispatch(new soter_exception_500($lasterror['message'],$lasterror['type'],'Fatal Error',$lasterror['file'],$lasterror['line']));}final public function dispatch(soter_exception $exception){$config=sr::config();ini_set('display_errors',true);$loggerwriters=$config->getloggerwriters();foreach($loggerwriters as $loggerwriter){$loggerwriter->write($exception);}if($config->getshowerror()){$handle=$config->getexceptionhandle();if($handle instanceof soter_exception_handle){$handle->handle($exception);}else{$exception->render();}}exit();}}class soter_logger_filewriter implements soter_logger_writer{private $logsdirpath;public function __construct($logsdirpath){$this->logsdirpath=sr::realpath($logsdirpath).'/'.date(sr::config()->getlogssubdirnameformat()).'/';}public function write(soter_exception $exception){$content='Domain : '.sr::server('http_host')."\n".'ClientIP : '.sr::server('SERVER_ADDR')."\n".'ServerIP : '.sr::serverip()."\n".'ServerHostname : '.sr::hostname()."\n".(!sr::iscli()?'Request Uri : '.sr::server('request_uri'):'')."\n".(!sr::iscli()?'Get Data : '.json_encode(sr::get()):'')."\n".(!sr::iscli()?'Post Data : '.json_encode(sr::post()):'')."\n".(!sr::iscli()?'Cookie Data : '.json_encode(sr::cookie()):'')."\n".(!sr::iscli()?'Server Data : '.json_encode(sr::server()):'')."\n".$exception->rendercli()."\n";if(!is_dir($this->logsdirpath)){mkdir($this->logsdirpath,0700,true);}if(!file_exists($logsfilepath=$this->logsdirpath.'logs.php')){$content='<?php defined("IN_SOTER") or exit();?>'."\n".$content;}file_put_contents($logsfilepath,$content,lock_ex|file_append);}}class soter_maintain_handle_default implements soter_maintain_handle{public function handle(){header('Content-type: text/html;charset=utf-8');echo '<center><h2>server is under maintenance</h2><h3>服务器维护中</h3>'.date('Y/m/d H:i:s e').'</center>';}}class soter_uri_rewriter_default implements soter_uri_rewriter{public function rewrite($uri){return $uri;}}class soter_exception_handle_default implements soter_exception_handle{public function handle(soter_exception $exception){$exception->render();}}class soter_database_slowquery_handle_default implements soter_database_slowquery_handle{public function handle($sql,$explainstring,$time){$dir=sr::config()->getprimaryapplicationdir().'storage/slow-query-debug/';$file=$dir.'slow-query-debug.php';if(!is_dir($dir)){mkdir($dir,0700,true);}$content="\nSQL : ".$sql."\nExplain : ".$explainstring."\nUsingTime : ".$time." ms"."\nTime : ".date('Y-m-d H:i:s')."\n";if(!file_exists($file)){$content='<?php defined("IN_SOTER") or exit();?>'."\n".$content;}file_put_contents($file,$content,lock_ex|file_append);}}class soter_database_index_handle_default implements soter_database_index_handle{public function handle($sql,$explainstring,$time){$dir=sr::config()->getprimaryapplicationdir().'storage/index-debug/';$file=$dir.'index-debug.php';if(!is_dir($dir)){mkdir($dir,0700,true);}$content="\nSQL : ".$sql."\nExplain : ".$explainstring."\nUsingTime : ".$time." ms"."\nTime : ".date('Y-m-d H:i:s')."\n";if(!file_exists($file)){$content='<?php defined("IN_SOTER") or exit();?>'."\n".$content;}file_put_contents($file,$content,lock_ex|file_append);}}class soter_cache_file implements soter_cache{private $_cachedirpath;public function __construct($cachefilename=''){$cachedirpath=empty($cachefilename)?sr::config()->getprimaryapplicationdir().'storage/cache/':sr::config($cachefilename);$this->_cachedirpath=sr::realpath($cachedirpath).'/';if(!is_dir($this->_cachedirpath)){mkdir($this->_cachedirpath,0700,true);}if(!is_writable($this->_cachedirpath)){throw new soter_exception_500('cache dir [ '.sr::safepath($this->_cachedirpath).' ] not writable');}}private function _hashkey($key){return md5($key);}private function _hashkeypath($key){$key=md5($key);$len=strlen($key);return $this->_cachedirpath.$key{$len-1}.'/'.$key{$len-2}.'/'.$key{$len-3}.'/';}private function pack($userdata,$cachetime){$cachetime=(int) $cachetime;return@serialize(array('userData'=>$userdata,'expireTime'=>($cachetime==0?0:time()+$cachetime)));}private function unpack($cachedata){$cachedata=@unserialize($cachedata);if(is_array($cachedata)&&isset($cachedata['userData'])&&isset($cachedata['expireTime'])){if($cachedata['expireTime']==0){return $cachedata['userData'];}return $cachedata['expireTime']>time()?$cachedata['userData']:null;}else{return null;}}public function clean(){return sr::rmdir($this->_cachedirpath,false);}public function delete($key){if(empty($key)){return false;}$key=$this->_hashkey($key);$filepath=$this->_hashkeypath($key).$key;if(file_exists($filepath)){return@unlink($filepath);}return true;}public function get($key){if(empty($key)){return null;}$key=$this->_hashkey($key);$filepath=$this->_hashkeypath($key).$key;if(file_exists($filepath)){$cachedata=file_get_contents($filepath);$userdata=$this->unpack($cachedata);return is_null($userdata)?null:$userdata;}return null;}public function set($key,$value,$cachetime){if(empty($key)){return false;}$key=$this->_hashkey($key);$cachedir=$this->_hashkeypath($key);$filepath=$cachedir.$key;if(!is_dir($cachedir)){mkdir($cachedir,0700,true);}$cachedata=$this->pack($value,$cachetime);if(empty($cachedata)){return false;}return file_put_contents($filepath,$cachedata,lock_ex);}}class soter_cache_memcached implements soter_cache{private $config,$handle;public function __construct($configfilename){if(is_array($configfilename)){$this->config=$configfilename;}else{$this->config=sr::config($configfilename);}}private function _init(){if(empty($this->handle)){$this->handle=new memcached();foreach($this->config as $server){if($server[2]>0){$this->handle->addserver($server[0],$server[1],$server[2]);}else{$this->handle->addserver($server[0],$server[1]);}}}}public function clean(){$this->_init();$this->handle->flush();}public function delete($key){$this->_init();$this->handle->delete($key);}public function get($key){$this->_init();return($data=$this->handle->get($key))?$data:null;}public function set($key,$value,$cachetime){$this->_init();return $this->handle->set($key,$value,$cachetime>0?(time()+$cachetime):0);}}class soter_cache_memcache implements soter_cache{private $config,$handle;public function __construct($configfilename){if(is_array($configfilename)){$this->config=$configfilename;}else{$this->config=sr::config($configfilename);}}private function _init(){if(empty($this->handle)){$this->handle=new memcache();foreach($this->config as $server){$this->handle->addserver($server[0],$server[1]);}}}public function clean(){$this->_init();return $this->handle->flush();}public function delete($key){$this->_init();return $this->handle->delete($key);}public function get($key){$this->_init();return($data=$this->handle->get($key))?$data:null;}public function set($key,$value,$cachetime){$this->_init();return $this->handle->set($key,$value,false,$cachetime);}}class soter_cache_apc implements soter_cache{public function clean(){@apc_clear_cache();@apc_clear_cache("user");}public function delete($key){return apc_delete($key);}public function get($key){$data=apc_fetch($key,$bo);if($bo===false){return null;}return $data;}public function set($key,$value,$cachetime){return apc_store($key,$value,$cachetime);}}class soter_cache_redis implements soter_cache{private $config,$handle;private function _init(){if(empty($this->handle)){$this->handle=array();foreach(array('masters','slaves')as $type){foreach($this->config[$type]as $k=>$config){$this->handle[$type][$k]=new redis();if($config['type']=='sock'){$this->handle[$type][$k]->connect($config['sock']);}else{$this->handle[$type][$k]->connect($config['host'],$config['port'],$config['timeout'],$config['retry']);}if(!is_null($config['password'])){$this->handle[$type][$k]->auth($config['password']);}if(!is_null($config['prefix'])){if($config['prefix']{strlen($config['prefix'])-1}!=':'){$config['prefix'].=':';}$this->handle[$type][$k]->setoption(redis::opt_prefix,$config['prefix']);}}}if(empty($this->handle['slaves'])&&!empty($this->handle['masters'])){$this->handle['slaves']=array();$this->handle['slaves'][0]=&$this->handle['masters'][key($this->handle['masters'])];}}}public function __construct($configfilename){if(is_array($configfilename)){$this->config=$configfilename;}else{$this->config=sr::config($configfilename);}}public function clean(){$this->_init();$status=true;foreach($this->handle['masters']as&$handle){$status=$status&$handle->flushdb();}return $status;}public function delete($key){$this->_init();$status=true;foreach($this->handle['masters']as&$handle){$status=$status&$handle->delete($key);}return $status;}public function get($key){$this->_init();$k=array_rand($this->handle['slaves']);$handle=&$this->handle['slaves'][$k];if($data=$handle->get($key)){return@unserialize($data);}else{return null;}}public function set($key,$value,$cachetime){$this->_init();$value=serialize($value);foreach($this->handle['masters']as&$handle){if($cachetime){return $handle->setex($key,$cachetime,$value);}else{return $handle->set($key,$value);}}}}class soter_generator extends soter_task{public function execute(soter_cliargs $args){$config=sr::config();$name=$args->get('name');$type=$args->get('type');$force=$args->get('overwrite');if(empty($name)){exit('name required , please use : --name=<Name>');}if(empty($type)){exit('type required , please use : --type=<Type>');}$classesdir=$config->getprimaryapplicationdir().$config->getclassesdirname().'/';$info=array('controller'=>array('dir'=>$config->getcontrollerdirname(),'parentClass'=>'Soter_Controller','methodName'=>sr::config()->getmethodprefix().'index()','nameTip'=>'Controller'),'business'=>array('dir'=>$config->getbusinessdirname(),'parentClass'=>'Soter_Business','methodName'=>'business()','nameTip'=>'Business'),'model'=>array('dir'=>$config->getmodeldirname(),'parentClass'=>'Soter_Model','methodName'=>'model()','nameTip'=>'Model'),'task'=>array('dir'=>$config->gettaskdirname(),'parentClass'=>'Soter_Task','methodName'=>'execute(Soter_CliArgs $args)','nameTip'=>'Task'));if(!isset($info[$type])){exit('[ Error ]'."\n".'Type : [ '.$type.' ]');}$classname=$info[$type]['dir'].'_'.$name;$file=$classesdir.str_replace('_','/',$classname).'.php';$method=$info[$type]['methodName'];$parentclass=$info[$type]['parentClass'];$tip=$info[$type]['nameTip'];if(file_exists($file)){if($force){$this->writefile($classname,$method,$parentclass,$file,$tip);}else{exit('[ Error ]'."\n".$tip.' [ '.$classname.' ] already exists , '."{$file}\n".'you can use --overwrite to overwrite the file.');}}else{$this->writefile($classname,$method,$parentclass,$file,$tip);}}private function writefile($classname,$method,$parentclass,$file,$tip){$dir=dirname($file);if(!is_dir($dir)){mkdir($dir,0755,true);}$code="<?php\nclass  {$classname} extends {$parentclass} {\n	public function {$method} {\n		\n	}\n}";if(file_put_contents($file,$code)){echo"[ Successfull ]\n{$tip} [ $classname ] created successfully \n".$file;}}}class soter_generator_mysql extends soter_task{public function execute(soter_cliargs $args){$config=sr::config();$name=$args->get('name');$type=$args->get('type');$force=$args->get('overwrite');$table=$args->get('table');$dbgroup=$args->get('db');if(empty($name)){exit('name required , please use : --name=<Name>');}if(empty($table)){exit('table name required , please use : --table=<Table Name>');}if(empty($type)){exit('type required , please use : --type=<Type>');}$columns=self::gettablefieldsinfo($table,$dbgroup);$primarykey='';$classesdir=$config->getprimaryapplicationdir().$config->getclassesdirname().'/';$info=array('bean'=>array('dir'=>$config->getbeandirname(),'parentClass'=>'Soter_Bean','nameTip'=>'Bean'),'dao'=>array('dir'=>$config->getdaodirname(),'parentClass'=>'Soter_Dao','nameTip'=>'Dao'),);if(!isset($info[$type])){exit('[ Error ]'."\n".'Type : [ '.$type.' ]');}$classname=$info[$type]['dir'].'_'.$name;$file=$classesdir.str_replace('_','/',$classname).'.php';$parentclass=$info[$type]['parentClass'];$tip=$info[$type]['nameTip'];$dir=dirname($file);if(!is_dir($dir)){mkdir($dir,0755,true);}if($type=='bean'){$methods=array();$fields=array();$fieldtemplate="\t//{comment}\n\tprivate \${column0};";$methodtemplate="\tpublic function get{column}() {\n\t\treturn \$this->{column0};\n\t}\n\n\tpublic function set{column}(\${column0}) {\n\t\t\$this->{column0} = \${column0};\n\t\treturn \$this;\n\t}";foreach($columns as $value){$column=ucfirst($value['name']);$column0=$value['name'];$fields[]=str_replace(array('{column0}','{comment}'),array($column0,$value['comment']),$fieldtemplate);$methods[]=str_replace(array('{column}','{column0}'),array($column,$column0),$methodtemplate);}$code="<?php\n\nclass {$classname} extends {$parentclass} {\n\n{fields}\n\n{methods}\n\n}";$code=str_replace(array('{fields}','{methods}'),array(implode("\n\n",$fields),implode("\n\n",$methods)),$code);}else{$columnsstring='';$_columns=array();foreach($columns as $value){if($value['primary']){$primarykey=$value['name'];}$_columns[]='\''.$value['name']."'//".$value['comment']."\n\t\t\t\t";}$columnsstring="array(\n\t\t\t\t".implode(',',$_columns).')';$code="<?php\n\nclass {$classname} extends {$parentclass} {\n\n	public function getColumns() {\n		return {columns};\n	}\n\n	public function getPrimaryKey() {\n		return '{primaryKey}';\n	}\n\n	public function getTable() {\n		return '{table}';\n	}\n\n}\n";$code=str_replace(array('{columns}','{primaryKey}','{table}'),array($columnsstring,$primarykey,$table),$code);}if(file_exists($file)){if($force){if(file_put_contents($file,$code)){echo"[ Successfull ]\n{$tip} [ $classname ] created successfully \n".$file;}}else{exit('[ Error ]'."\n".$tip.' [ '.$classname.' ] already exists , '."{$file}\n".'you can use --overwrite to overwrite the file.');}}else{if(file_put_contents($file,$code)){echo"[ Successfull ]\n{$tip} [ $classname ] created successfully \n".$file;}}}private static function gettablefieldsinfo($tablename,$db){if(!is_object($db)){$db=sr::db($db);}if(strtolower($db->getdrivertype())!='mysql'){throw new soter_exception_500('getTableFieldsInfo() only for mysql database');}$info=array();$result=$db->execute('SHOW FULL COLUMNS FROM '.$db->gettableprefix().$tablename)->rows();if($result){foreach($result as $val){$info[$val['Field']]=array('name'=>$val['Field'],'type'=>$val['Type'],'comment'=>$val['Comment']?$val['Comment']:$val['Field'],'notnull'=>$val['Null']=='NO'?1:0,'default'=>$val['Default'],'primary'=>(strtolower($val['Key'])=='pri'),'autoinc'=>(strtolower($val['Extra'])=='auto_increment'),);}}return $info;}}class soter_session_redis extends soter_session{public function init(){ini_set('session.save_handler','redis');ini_set('session.save_path',$this->config['path']);}}class soter_session_memcached extends soter_session{public function init(){ini_set('session.save_handler','memcached');ini_set('session.save_path',$this->config['path']);}}class soter_session_memcache extends soter_session{public function init(){ini_set('session.save_handler','memcache');ini_set('session.save_path',$this->config['path']);}}class soter_session_mongodb extends soter_session{private $__mongo_collection=null;private $__current_session=null;private $__mongo_conn=null;public function __construct($configfilename){parent::__construct($configfilename);$cfg=sr::config()->getsessionconfig();$this->config['lifetime']=$cfg['lifetime'];}public function connect(){if(is_object($this->__mongo_collection)){return;}$connection_string=sprintf('mongodb://%s:%s',$this->config['host'],$this->config['port']);if($this->config['user']!=null&&$this->config['password']!=null){$connection_string=sprintf('mongodb://%s:%s@%s:%s/%s',$this->config['user'],$this->config['password'],$this->config['host'],$this->config['port'],$this->config['database']);}$opts=array('connect'=>true);if($this->config['persistent']&&!empty($this->config['persistentId'])){$opts['persist']=$this->config['persistentId'];}if($this->config['replicaSet']){$opts['replicaSet']=$this->config['replicaSet'];}$class='MongoClient';if(!class_exists($class)){$class='Mongo';}$this->__mongo_conn=$object_conn=new $class($connection_string,$opts);$object_mongo=$object_conn->{$this->config['database']};$this->__mongo_collection=$object_mongo->{$this->config['collection']};if($this->__mongo_collection==null){throw new soter_exception_500('can not connect to mongodb server');}}public function init(){session_set_save_handler(array(&$this,'open'),array(&$this,'close'),array(&$this,'read'),array(&$this,'write'),array(&$this,'destroy'),array(&$this,'gc'));}public function open($session_path,$session_name){$this->connect();return true;}public function close(){$this->__mongo_conn->close();return true;}public function read($session_id){$result=null;$ret='';$expiry=time();$query['_id']=$session_id;$query['expiry']=array('$gte'=>$expiry);$result=$this->__mongo_collection->findone($query);if($result){$this->__current_session=$result;$result['expiry']=time()+$this->config['lifetime'];$this->__mongo_collection->update(array("_id"=>$session_id),$result);$ret=$result['data'];}return $ret;}public function write($session_id,$data){$result=true;$expiry=time()+$this->config['lifetime'];$session_data=array();if(empty($this->__current_session)){$session_id=$session_id;$session_data['_id']=$session_id;$session_data['data']=$data;$session_data['expiry']=$expiry;}else{$session_data=(array) $this->__current_session;$session_data['data']=$data;$session_data['expiry']=$expiry;}$query['_id']=$session_id;$record=$this->__mongo_collection->findone($query);if($record==null){$this->__mongo_collection->insert($session_data);}else{$record['data']=$data;$record['expiry']=$expiry;$this->__mongo_collection->save($record);}return true;}public function destroy($session_id){unset($_session);$query['_id']=$session_id;$this->__mongo_collection->remove($query);return true;}public function gc($max=0){$query=array();$query['expiry']=array(':lt'=>time());$this->__mongo_collection->remove($query,array('justOne'=>false));return true;}}class soter_session_mysql extends soter_session{protected $dbconnection;protected $dbtable;public function __construct($configfilename){parent::__construct($configfilename);$cfg=sr::config()->getsessionconfig();$this->config['lifetime']=$cfg['lifetime'];}public function init(){session_set_save_handler(array($this,'open'),array($this,'close'),array($this,'read'),array($this,'write'),array($this,'destroy'),array($this,'gc'));}public function connect(){$this->dbtable=$this->config['table'];if($this->config['group']){$this->dbconnection=sr::db($this->config['group']);}else{$dbconfig=soter_database::getdefaultconfig();$dbconfig['database']=$this->config['database'];$dbconfig['tablePrefix']=$this->config['table_prefix'];$dbconfig['masters']['master01']['hostname']=$this->config['hostname'];$dbconfig['masters']['master01']['port']=$this->config['port'];$dbconfig['masters']['master01']['username']=$this->config['username'];$dbconfig['masters']['master01']['password']=$this->config['password'];$this->dbconnection=sr::db($dbconfig);}}public function open($save_path,$session_name){if(!is_object($this->dbconnection)){$this->connect();}return true;}public function close(){return $this->dbconnection->close();}public function read($id){$result=$this->dbconnection->from($this->dbtable)->where(array('id'=>$id))->execute();if($result->total()){$record=$result->row();$where['id']=$record['id'];$data['timestamp']=time()+intval($this->config['lifetime']);$this->dbconnection->update($this->dbtable,$data,$where)->execute();return $record['data'];}else{return false;}return true;}public function write($id,$sessiondata){$data['id']=$id;$data['data']=$sessiondata;$data['timestamp']=time()+intval($this->config['lifetime']);$this->dbconnection->replace($this->dbtable,$data);return $this->dbconnection->execute();}public function destroy($id){unset($_session);return $this->dbconnection->delete($this->dbtable,array('id'=>$id))->execute();}public function gc($max=0){return $this->dbconnection->delete($this->dbtable,array('timestamp <'=>time()))->execute();}}