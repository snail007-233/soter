@todo

-> 国际化支持(暂时不加)


@done
(*代表已测试)
-> * 异常接管
-> * 异常类的错误消息和掉用堆栈的各种模式（cli，html，json）格式化
-> * 自定义LoggerWriter
-> * 自定义错误处理，显示自定义的错误页面
-> * pathinfo模式路由器
-> * pathinfo路由器对hmvc的支持
-> * pathinfo路由器对传递参数的支持
     可以这样传递参数：
     1.比如：/index.php/Welcome/article-system-001.do
      传递了两个参数给Welcome->do_article($cat='food',$id='002'),其中$cat是system，$id是001
      为了避免没有传递参数的时候报错，我们需要给$cat和$id设置默认值。
     2.比如：/index.php/Welcome/article--001.do
      传递了两个参数给Welcome->do_article($cat='food',$id='002'),其中$cat是空，$id是001
     3.比如：/index.php/Welcome/article-system-.do
      传递了两个参数给Welcome->do_article($cat='food',$id='002'),其中$cat是system，$id是空
     4.比如：/index.php/Welcome/article-system.do
      传递了两个参数给Welcome->do_article($cat='food',$id='002'),其中$cat是system，$id是002
     5.比如：/index.php/Welcome/article.do
      传递了两个参数给Welcome->do_article($cat='food',$id='002'),其中$cat是food，$id是002
      默认的参数分隔符 - 可以通过配置修改 ->setMethodParametersDelimiter('-');
-> * 类库自动加载
-> * 添加包功能
-> * 对于主项目，Hmvc子项目，拓展包，类库。
   1.类（控制器，模型，类库等）的查找的顺序是：
   Hmvc子项目[classes->类库classes->拓展包classes->拓展包类库classes]
   ->主项目[classes->类库classes->拓展包classes->拓展包类库classes]
   2.配置文件,查找的顺序是：
   Hmvc子项目当前环境配置目录->Hmvc子项目default配置目录
   ->Hmvc子项目类库当前环境配置目录->Hmvc子项目类库default配置目录
   ->Hmvc子项目拓展包当前环境配置目录->Hmvc子项目拓展包default配置目录
   ->主项目当前环境配置目录->主项目default配置目录
   ->主项目类库当前环境配置目录->主项目类库default配置目录
   ->主项目拓展包当前环境配置目录->主项目拓展包default配置目录
   3.函数文件,查找的顺序是：
   Hmvc子项目functions目录->Hmvc子项目类库functions目录->Hmvc子项目拓展包functions目录
   ->主项目functions目录->主项目类库functions目录->主项目拓展包functions目录
  所以为了避免了解这么复杂的顺序，保证名称唯一就行了，但是了解了顺序就能合理的利用配置类库等。

-> * 在hmvc模块中的bootstrap.php配置中下面的配置不再起作用，请勿使用：
   $config->setHmvcModules()
          ->setIndexDir()
          ->setIndexName()
          ->setApplicationDir()
          ->setRequest()
          ->addRouter()
-> * 插件模式支持
-> * 环境配置支持
-> * 运行环境自动切换支持
-> * 用户自定义类错误显示处理类优先级大于系统错误显示处理类。
     注意：只有showError为true的时候，用户用户自定义类错误显示处理类或系统错误显示处理类才会被调用。
   * 1.当设置了自定义类错误显示处理类，系统错误显示处理类不再起作用，是否显示错误由用户自定义类处理。
   * 2.当没有设置自定义类错误显示处理类，系统错误显示处理类显示错误。
-> * 加载配置,支持用点快捷获取键值
-> * 命令行支持
   命令行可以通过 --env=testing --hmvc=Demo --task=TestTask --parameter1=value1 
   指定环境，hmvc模块，任务名称，以及其它参数
   任务类的execute(Soter_CliArgs $args)方法里面通过$args->get('parameter1')获取具体参数值
-> * 加载模型
   1.模型层分层为business和dao层
   2.或者不分层的model层
-> * 加载类库
-> * 加载函数文件（有自动加载）
-> * 完成文件日志Writer：Soter_Logger_FileWriter
-> * 便捷获取输入功能，get post cookie session server raw_post
-> * uri重写功能
-> * 完成get模式路由器
-> * 维护模式支持，可以设置维护状态，所有页面指向维护页面，可以设置ip白名单,支持ip段设置。
   比如：192.168.0.23 , 192.168.0.23/24
-> * pdo数据库驱动支持[mysql,sqlite>= 3.7.11(PHP5.5)]，以及无缝切换
   1.支持多主多从，读写分离（原理：所有的读都在随机选取的一个从上面进行，所有的写都在主组上进行）
   2.多主多从模式下，支持事务（原理：所有的每次读写操作都在主组上进行，主组有一个事务失败，主组全部回滚事务）
   3.无需手动加载数据库，用户不用关心数据库何时连接，只有使用的时候才会连接。
   4.使用简易
   5.主要特色功能：批量更新，批量插入，批量replace
   6.基础功能支持：增删改查，ar模式
   7.自定义数据库配置文件
   8.PDO_RESULT增加返回对象支持
   注意：
     当调用getSql()方法之后，之后如果再进行sql的变化将不会起作用。
     execute的还是调用getSql()时的sql。也就是调用getSql()方法之后不应该再进行sql查询改变。
     sqlite批量插入功能，因为sqlite>= 3.7.11(PHP5.5)开始才支持，一次insert多个values，
     所以sqlite批量插入功能，要求PHP>=5.5的版本，PHP>=5.5的版本的PDO SQLite 版本才>=3.7.11。
     

-> * 查询可以设置自动explain记录没有使用索引的sql语句
-> * 数据库查询支持查询缓存
-> * 慢查询记录
-> * 命令行各种代码生成器[表beans（绑定表），Dao层（绑定表），business层，model层，控制器，task]
   1.生成控制器：
     php index.php --task=Soter_Generator --type=controller --name=MyFirstController
   2.生成模型：
     php index.php --task=Soter_Generator --type=model --name=MyFirstModel
   3.生成Task：
     php index.php --task=Soter_Generator --type=task --name=MyFirstTask
   4.生成Business：
     php index.php --task=Soter_Generator --type=business --name=MyFirstBusiness 
   5.生成Dao：(只支持mysql)
     php index.php --task=Soter_Generator_Mysql --type=dao --name=MyFirstDao --table=test
   6.生成Bean： (只支持mysql)
     php index.php --task=Soter_Generator_Mysql --type=bean --name=MyFirstBean --table=test
   提示：
    1. 5和6数据连接使用的是默认组，表名称 --name不需要加前缀，如果要指定数据库配置组，可以使用参数--db=配置组名称,
        比如：--db=www_mysql
    2. 默认情况下当文件存在1-6的操作不再新建文件。可以使用参数 --overwrite 覆盖已经存在的文件
-> * Controller父类设计
-> * Business模型父类设计
-> * Model模型父类设计
-> * 视图设计
-> * pathinfo url生成
-> * 各种缓存无缝切换设计（memcache memcached redis  file apc）
   1.file文件缓存
   2.memcache缓存
   3.memcached缓存
   4.redis缓存
   5.apc缓存
-> session托管（memcache memcached redis mysql mongodb）
-> * 数据验证功能
-> * 控制器方法缓存
-> * 分页条
-> * 自定义数据验证规则
-> * 框架里面预留伪静态文件
-> * 手册伪静态
-> * 手册维护模式
-> * 手册clientip白名单
-> * 重定向方法
-> * json输出设计
-> * Dao模型父类设计
-> 手册 message redirect dao方法 异常json回调  json输出回调
   Sr里其它没有介绍的方法
-> * 关闭Soter错误控制功能
-> * 命令行task的execute方法支持返回空代表执行成功 返回错误信息或者错误码表示执行失败
-> * 命令行task支持--debug-error参数，只有任务执行失败的时候才输出信息。
   任务执行是否失败，是根据任务的execute方法的返回值判断的，
   返回空代表执行成功 返回错误信息或者错误码表示执行失败。
   提示：
   --debug-error参数和--debug参数只能存在一个，如果都存在则忽略--debug